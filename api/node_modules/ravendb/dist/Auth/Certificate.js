"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const StringUtil_1 = require("../Utility/StringUtil");
const Exceptions_1 = require("../Exceptions");
class Certificate {
    constructor(certificate, passprase, ca) {
        this._certificate = certificate;
        this._passphrase = passprase;
        this._ca = ca;
    }
    static createFromOptions(options) {
        if (!options) {
            return null;
        }
        let certificate = null;
        switch (options.type) {
            case Certificate.PEM:
                certificate = this.createPem(options.certificate, options.password, options.ca);
                break;
            case Certificate.PFX:
                certificate = this.createPfx(options.certificate, options.password, options.ca);
                break;
        }
        return certificate;
    }
    static createPem(certificate, passphrase, ca) {
        return new PemCertificate(certificate, passphrase, ca);
    }
    static createPfx(certificate, passphrase, ca) {
        return new PfxCertificate(certificate, passphrase, ca);
    }
    toAgentOptions() {
        if (this._passphrase) {
            return { passphrase: this._passphrase };
        }
        return {};
    }
}
Certificate.PEM = "pem";
Certificate.PFX = "pfx";
exports.Certificate = Certificate;
class PemCertificate extends Certificate {
    constructor(certificate, passprase, ca) {
        super(certificate, passprase, ca);
        this.certToken = "CERTIFICATE";
        this.keyToken = "RSA PRIVATE KEY";
        if (certificate instanceof Buffer) {
            this._certificate = certificate.toString();
        }
        this._key = this._fetchPart(this.keyToken);
        this._certificate = this._fetchPart(this.certToken);
        if (!this._key && !this._certificate) {
            Exceptions_1.throwError("InvalidArgumentException", "Invalid .pem certificate provided");
        }
    }
    toAgentOptions() {
        const result = super.toAgentOptions();
        return Object.assign(result, {
            cert: this._certificate,
            key: this._key,
            ca: this._ca
        });
    }
    _fetchPart(token) {
        const cert = this._certificate;
        const prefixSuffix = "-----";
        const beginMarker = `${prefixSuffix}BEGIN ${token}${prefixSuffix}`;
        const endMarker = `${prefixSuffix}END ${token}${prefixSuffix}`;
        if (cert.includes(beginMarker) && cert.includes(endMarker)) {
            const part = cert.substring(cert.indexOf(beginMarker), cert.indexOf(endMarker) + endMarker.length);
            if (!StringUtil_1.StringUtil.isNullOrWhiteSpace(part)) {
                return part;
            }
        }
        return null;
    }
}
exports.PemCertificate = PemCertificate;
class PfxCertificate extends Certificate {
    constructor(certificate, passprase, ca) {
        if (!(certificate instanceof Buffer)) {
            Exceptions_1.throwError("InvalidArgumentException", "Pfx certificate should be a Buffer");
        }
        super(certificate, passprase, ca);
    }
    toAgentOptions() {
        return Object.assign(super.toAgentOptions(), {
            pfx: this._certificate,
            ca: this._ca
        });
    }
}
exports.PfxCertificate = PfxCertificate;
