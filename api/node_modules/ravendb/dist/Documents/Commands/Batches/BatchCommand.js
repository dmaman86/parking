"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RavenCommand_1 = require("../../../Http/RavenCommand");
const Exceptions_1 = require("../../../Exceptions");
const HttpUtil_1 = require("../../../Utility/HttpUtil");
const Serializer_1 = require("../../../Mapping/Json/Serializer");
class BatchCommand extends RavenCommand_1.RavenCommand {
    constructor(conventions, commands, options = null) {
        super();
        this._commands = commands;
        this._options = options;
        if (!conventions) {
            Exceptions_1.throwError("InvalidArgumentException", "conventions cannot be null");
        }
        if (!commands) {
            Exceptions_1.throwError("InvalidArgumentException", "commands cannot be null");
        }
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database + "/bulk_docs";
        const headers = HttpUtil_1.HeadersBuilder.create().withContentTypeJson().build();
        const commandsArray = this._commands.reduce((result, command) => [...result, command.serialize()], []);
        const body = Serializer_1.JsonSerializer.getDefault().serialize({ Commands: commandsArray });
        const queryString = this._appendOptions();
        const request = {
            method: "POST",
            uri: uri + queryString,
            headers,
            body
        };
        return request;
    }
    setResponse(response, fromCache) {
        if (!response) {
            Exceptions_1.throwError("InvalidOperationException", "Got null response from the server after doing a batch,"
                + " something is very wrong. Probably a garbled response.");
        }
        this.result = this._parseResponseDefault(response);
    }
    _appendOptions() {
        if (!this._options) {
            return "";
        }
        let result = "?";
        if (this._options.waitForReplicas) {
            result += `&waitForReplicasTimeout=${this._options.waitForReplicasTimeout}`;
            if (this._options.throwOnTimeoutInWaitForReplicas) {
                result += "&throwOnTimeoutInWaitForReplicas=true";
            }
            result += "&numberOfReplicasToWaitFor=";
            result += this._options.majority ? "majority" : this._options.numberOfReplicasToWaitFor;
        }
        if (this._options.waitForIndexes) {
            result += "&waitForIndexesTimeout=";
            result += this._options.waitForIndexesTimeout;
            if (this._options.throwOnTimeoutInWaitForIndexes) {
                result += "&waitForIndexThrow=true";
            }
            if (this._options.waitForSpecificIndexes
                && this._options.waitForSpecificIndexes.length) {
                for (const specificIndex of this._options.waitForSpecificIndexes) {
                    result += "&waitForSpecificIndex=" + specificIndex;
                }
            }
        }
    }
    get isReadRequest() {
        return false;
    }
    dispose() { }
}
exports.BatchCommand = BatchCommand;
