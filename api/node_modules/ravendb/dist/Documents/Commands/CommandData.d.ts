import { BatchOptions } from "./Batches/BatchOptions";
export declare type CommandType = "None" | "PUT" | "PATCH" | "DELETE" | "AttachmentPUT" | "AttachmentDELETE" | "ClientAnyCommand" | "ClientNotAttachmentPUT";
export interface ICommandData {
    id: string;
    name: string;
    changeVector: string;
    type: CommandType;
    serialize(): object;
}
export declare class DeleteCommandData implements ICommandData {
    id: string;
    name: string;
    changeVector: string;
    readonly type: CommandType;
    constructor(id: string, changeVector?: string);
    serialize(): object;
    protected _serializeExtraFields(resultingObject: object): void;
}
export declare class PutCommandDataBase<T extends object> implements ICommandData {
    readonly type: CommandType;
    id: string;
    name: string;
    changeVector: string;
    private _document;
    constructor(id: string, changeVector: string, document: T);
    serialize(): object;
}
export declare class PutCommandDataWithJson extends PutCommandDataBase<object> {
    constructor(id: string, changeVector: string, document: object);
}
export declare class SaveChangesData {
    deferredCommands: ICommandData[];
    deferredCommandsMap: Map<string, ICommandData>;
    sessionCommands: ICommandData[];
    entities: object[];
    options: BatchOptions;
    constructor(args: {
        deferredCommands: ICommandData[];
        deferredCommandsMap: Map<string, ICommandData>;
        options: BatchOptions;
    });
}
