"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Exceptions_1 = require("../../Exceptions");
class DeleteCommandData {
    get type() {
        return "DELETE";
    }
    constructor(id, changeVector) {
        this.id = id;
        if (!id) {
            Exceptions_1.throwError("InvalidArgumentException", "Id cannot be null or undefined.");
        }
        this.changeVector = changeVector;
    }
    serialize() {
        const result = {
            Id: this.id,
            ChangeVector: this.changeVector,
            Type: this.type
        };
        this._serializeExtraFields(result);
        return result;
    }
    _serializeExtraFields(resultingObject) {
    }
}
exports.DeleteCommandData = DeleteCommandData;
class PutCommandDataBase {
    constructor(id, changeVector, document) {
        this.name = null;
        if (!document) {
            Exceptions_1.throwError("InvalidArgumentException", "Document cannot be null or undefined.");
        }
        this.id = id;
        this.changeVector = changeVector;
        this._document = document;
    }
    get type() {
        return "PUT";
    }
    serialize() {
        const toSerialize = {
            Id: this.id,
            ChangeVector: this.changeVector,
            Type: this.type,
            Document: this._document
        };
        return toSerialize;
    }
}
exports.PutCommandDataBase = PutCommandDataBase;
class PutCommandDataWithJson extends PutCommandDataBase {
    constructor(id, changeVector, document) {
        super(id, changeVector, document);
    }
}
exports.PutCommandDataWithJson = PutCommandDataWithJson;
class SaveChangesData {
    constructor(args) {
        this.sessionCommands = [];
        this.entities = [];
        this.deferredCommands = args.deferredCommands;
        this.deferredCommandsMap = args.deferredCommandsMap;
        this.options = args.options;
    }
}
exports.SaveChangesData = SaveChangesData;
