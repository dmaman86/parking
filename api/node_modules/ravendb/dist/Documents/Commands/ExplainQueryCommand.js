"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RavenCommand_1 = require("../../Http/RavenCommand");
const IndexQuery_1 = require("../Queries/IndexQuery");
const Exceptions_1 = require("../../Exceptions");
class ExplainQueryCommand extends RavenCommand_1.RavenCommand {
    constructor(conventions, indexQuery) {
        super();
        if (!conventions) {
            Exceptions_1.throwError("InvalidArgumentException", "Conventions cannot be null");
        }
        if (!indexQuery) {
            Exceptions_1.throwError("InvalidArgumentException", "IndexQuery cannot be null");
        }
        this._conventions = conventions;
        this._indexQuery = indexQuery;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database + "/queries?debug=explain";
        const headers = this._getHeaders().withContentTypeJson().build();
        return {
            method: "POST",
            uri,
            body: IndexQuery_1.writeIndexQuery(this._conventions, this._indexQuery),
            headers
        };
    }
    setResponse(response, fromCache) {
        if (!response) {
            this.result = null;
            return;
        }
        const data = this._serializer.deserialize(response);
        const results = data["results"];
        if (!results) {
            this._throwInvalidResponse();
            return;
        }
        this.result = results;
    }
    get isReadRequest() {
        return true;
    }
}
exports.ExplainQueryCommand = ExplainQueryCommand;
