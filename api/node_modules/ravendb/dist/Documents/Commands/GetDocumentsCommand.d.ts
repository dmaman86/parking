import { RavenCommand } from "../../Http/RavenCommand";
import { ServerNode } from "../../Http/ServerNode";
import { HttpRequestBase } from "../../Primitives/Http";
import { IRavenObject } from "../..";
import { JsonSerializer } from "../../Mapping/Json/Serializer";
export interface GetDocumentsByIdCommandOptions {
    id: string;
    includes?: string[];
    metadataOnly?: boolean;
}
export interface GetDocumentsByIdsCommandOptions {
    ids: string[];
    includes?: string[];
    metadataOnly?: boolean;
}
export interface GetDocumentsStartingWithOptions {
    start: number;
    pageSize: number;
    startsWith?: string;
    startsAfter?: string;
    matches?: string;
    exclude?: string;
    metadataOnly?: boolean;
}
export interface GetDocumentsResult {
    includes: IRavenObject;
    results: any[];
    nextPageStart: number;
}
export declare class GetDocumentsCommand extends RavenCommand<GetDocumentsResult> {
    private _id;
    private _ids;
    private _includes;
    private _metadataOnly;
    private _startsWith;
    private _matches;
    private _start;
    private _pageSize;
    private _exclude;
    private _startAfter;
    constructor(opts: GetDocumentsByIdCommandOptions | GetDocumentsByIdsCommandOptions | GetDocumentsStartingWithOptions);
    createRequest(node: ServerNode): HttpRequestBase;
    prepareRequestWithMultipleIds(request: HttpRequestBase, ids: string[]): HttpRequestBase;
    protected readonly _serializer: JsonSerializer;
    setResponse(response: string, fromCache: boolean): void;
    readonly isReadRequest: boolean;
}
