"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const StatusCode_1 = require("../../Http/StatusCode");
const RavenCommand_1 = require("../../Http/RavenCommand");
const Exceptions_1 = require("../../Exceptions");
const HttpUtil_1 = require("../../Utility/HttpUtil");
class HeadDocumentCommand extends RavenCommand_1.RavenCommand {
    constructor(id, changeVector) {
        super();
        if (!id) {
            Exceptions_1.throwError("InvalidArgumentException", "Id cannot be null.");
        }
        this._id = id;
        this._changeVector = changeVector;
    }
    get isReadRequest() {
        return false;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database + "/docs?id=" + encodeURIComponent(this._id);
        const headers = this._getHeaders()
            .withContentTypeJson();
        if (this._changeVector) {
            headers.with("If-None-Match", this._changeVector);
        }
        return {
            method: "HEAD",
            uri,
            headers: headers.build()
        };
    }
    processResponse(cache, response, url) {
        if (StatusCode_1.StatusCodes.NotModified === response.statusCode) {
            this.result = this._changeVector;
            return "Automatic";
        }
        if (response.statusCode === StatusCode_1.StatusCodes.NotFound) {
            this.result = null;
            return "Automatic";
        }
        this.result = HttpUtil_1.getRequiredEtagHeader(response);
        return "Automatic";
    }
    setResponse(response, fromCache) {
        if (response) {
            this._throwInvalidResponse();
        }
        this.result = null;
    }
}
exports.HeadDocumentCommand = HeadDocumentCommand;
