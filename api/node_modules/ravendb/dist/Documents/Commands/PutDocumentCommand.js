"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RavenCommand_1 = require("../../Http/RavenCommand");
const Exceptions_1 = require("../../Exceptions");
const HttpUtil_1 = require("../../Utility/HttpUtil");
class PutDocumentCommand extends RavenCommand_1.RavenCommand {
    constructor(id, changeVector, document) {
        super();
        if (!id) {
            Exceptions_1.throwError("InvalidArgumentException", "Id cannot be null or undefined.");
        }
        if (!document) {
            Exceptions_1.throwError("InvalidArgumentException", "Document cannot be null or undefined.");
        }
        this._id = id;
        this._changeVector = changeVector;
        this._document = document;
    }
    get _serializer() {
        const serializer = super._serializer;
        serializer.replacerRules.length = 0;
        return serializer;
    }
    createRequest(node) {
        const uri = `${node.url}/databases/${node.database}/docs?id=${encodeURIComponent(this._id)}`;
        const body = this._serializer.serialize(this._document);
        const req = {
            uri,
            method: "PUT",
            body,
            headers: HttpUtil_1.HeadersBuilder.create()
                .withContentTypeJson()
                .build()
        };
        this._addChangeVectorIfNotNull(this._changeVector, req);
        return req;
    }
    setResponse(response, fromCache) {
        this.result = this._serializer.deserialize(response);
    }
    get isReadRequest() {
        return false;
    }
}
exports.PutDocumentCommand = PutDocumentCommand;
