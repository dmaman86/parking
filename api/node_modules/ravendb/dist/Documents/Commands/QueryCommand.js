"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RavenCommand_1 = require("../../Http/RavenCommand");
const QueryResult_1 = require("../Queries/QueryResult");
const IndexQuery_1 = require("../Queries/IndexQuery");
const Exceptions_1 = require("../../Exceptions");
const StringBuilder = require("string-builder");
const ObjectMapper_1 = require("../../Mapping/ObjectMapper");
const Serializer_1 = require("../../Mapping/Json/Serializer");
class QueryCommand extends RavenCommand_1.RavenCommand {
    constructor(conventions, indexQuery, metadataOnly, indexEntriesOnly) {
        super();
        this._conventions = conventions;
        if (!indexQuery) {
            Exceptions_1.throwError("InvalidArgumentException", "indexQuery cannot be null.");
        }
        this._indexQuery = indexQuery;
        this._metadataOnly = metadataOnly;
        this._indexEntriesOnly = indexEntriesOnly;
    }
    createRequest(node) {
        this._canCache = !this._indexQuery.disableCaching;
        this._canCacheAggressively = this._canCache && !this._indexQuery.waitForNonStaleResults;
        const path = new StringBuilder(node.url)
            .append("/databases/")
            .append(node.database)
            .append("/queries?queryHash=")
            .append(this._indexQuery.getQueryHash());
        if (this._metadataOnly) {
            path.append("&metadataOnly=true");
        }
        if (this._indexEntriesOnly) {
            path.append("&debug=entries");
        }
        const uri = path.toString();
        const body = IndexQuery_1.writeIndexQuery(this._conventions, this._indexQuery);
        const headers = this._getHeaders().withContentTypeJson().build();
        return {
            method: "POST",
            uri,
            headers,
            body
        };
    }
    get _serializer() {
        const serializer = super._serializer;
        return serializer;
    }
    setResponse(response, fromCache) {
        if (!response) {
            this.result = null;
            return;
        }
        const rawResult = ObjectMapper_1.ObjectKeysTransform.camelCase(Serializer_1.JsonSerializer.getDefault().deserialize(response), false);
        this.result = this._typedObjectMapper.fromObjectLiteral(rawResult, {
            typeName: QueryResult_1.QueryResult.name
        }, new Map([[QueryResult_1.QueryResult.name, QueryResult_1.QueryResult]]));
        if (fromCache) {
            this.result.durationInMs = -1;
        }
    }
    get isReadRequest() {
        return true;
    }
}
exports.QueryCommand = QueryCommand;
