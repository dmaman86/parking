import { TypesAwareObjectMapper } from "../../Mapping/ObjectMapper";
import { DocumentType } from "../DocumentAbstractions";
import { ObjectTypeDescriptor } from "../../Types";
import { ClientConfiguration } from "../Operations/Configuration/ClientConfiguration";
import { ReadBalanceBehavior } from "../../Http/ReadBalanceBehavior";
import { JsonSerializer } from "../../Mapping/Json/Serializer";
export declare type IdConvention = (databaseName: string, entity: object) => Promise<string>;
export declare class DocumentConventions {
    private static _defaults;
    static readonly defaultConventions: DocumentConventions;
    private static _cachedDefaultTypeCollectionNames;
    private _registeredIdConventions;
    private _registeredIdPropertyNames;
    private _frozen;
    private _originalConfiguration;
    private _idPropertyCache;
    private _identityPartsSeparator;
    private _disableTopologyUpdates;
    private _transformClassCollectionNameToDocumentIdPrefix;
    private _documentIdGenerator;
    private _findIdentityPropertyNameFromCollectionName;
    private _findCollectionName;
    private _findJsTypeName;
    private _findJsType;
    private _useOptimisticConcurrency;
    private _throwIfQueryPageSizeIsNotSet;
    private _maxNumberOfRequestsPerSession;
    private _readBalanceBehavior;
    private _maxHttpCacheSize;
    private _knownEntityTypes;
    private _entityObjectMapper;
    private _entityJsonSerializer;
    constructor();
    entityObjectMapper: TypesAwareObjectMapper;
    entitySerializer: JsonSerializer;
    readBalanceBehavior: ReadBalanceBehavior;
    deserializeEntityFromJson(documentType: ObjectTypeDescriptor, document: object): object;
    maxNumberOfRequestsPerSession: number;
    maxHttpCacheSize: number;
    isThrowIfQueryPageSizeIsNotSet(): boolean;
    setThrowIfQueryPageSizeIsNotSet(throwIfQueryPageSizeIsNotSet: boolean): void;
    isUseOptimisticConcurrency(): boolean;
    setUseOptimisticConcurrency(useOptimisticConcurrency: boolean): void;
    findJsType: (id: string, doc: object) => ObjectTypeDescriptor<object>;
    findJsTypeName: (ctorOrTypeChecker: ObjectTypeDescriptor<object>) => string;
    findCollectionName: (constructorOrTypeChecker: ObjectTypeDescriptor<object>) => string;
    findIdentityPropertyNameFromCollectionName: (collectionName: string) => string;
    documentIdGenerator: IdConvention;
    identityPartsSeparator: string;
    disableTopologyUpdates: boolean;
    throwIfQueryPageSizeIsNotSet: boolean;
    transformClassCollectionNameToDocumentIdPrefix: (maybeClassCollectionName: string) => string;
    static defaultGetCollectionName(ctorOrTypeChecker: ObjectTypeDescriptor): string;
    getCollectionNameForType(ctorOrTypeChecker: ObjectTypeDescriptor): string;
    getCollectionNameForEntity(entity: object): string;
    private _findCollectionNameForObjectLiteral;
    findCollectionNameForObjectLiteral: (entity: object) => string;
    getEntityTypeDescriptor<T extends object>(entity: T): ObjectTypeDescriptor<T>;
    generateDocumentId(database: string, entity: object): Promise<string>;
    registerIdConvention<TEntity>(ctorOrTypeChecker: ObjectTypeDescriptor, idConvention: IdConvention): DocumentConventions;
    registerEntityIdPropertyName(ctorOrTypeChecker: ObjectTypeDescriptor, idProperty: string): void;
    getJsType(id: string, document: object): ObjectTypeDescriptor;
    getJsTypeName(entityType: ObjectTypeDescriptor): string;
    clone(): DocumentConventions;
    getIdentityProperty(documentType: DocumentType): string;
    updateFrom(configuration: ClientConfiguration): void;
    static defaultTransformCollectionNameToDocumentIdPrefix(collectionName: string): string;
    freeze(): void;
    private _assertNotFrozen();
    readonly knownEntityTypesByName: Map<string, ObjectTypeDescriptor<object>>;
    readonly knownEntityTypes: ObjectTypeDescriptor<object>[];
    registerEntityType(entityType: ObjectTypeDescriptor): this;
    registerEntityType(entityType: ObjectTypeDescriptor, name: string): this;
    tryRegisterEntityType(docType: DocumentType): this;
    findEntityType<T extends object>(documentType: DocumentType<T>): ObjectTypeDescriptor<T>;
    findEntityType<T extends object>(typeName: string): ObjectTypeDescriptor<T>;
}
