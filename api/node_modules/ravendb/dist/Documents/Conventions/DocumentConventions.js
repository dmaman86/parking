"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ObjectMapper_1 = require("../../Mapping/ObjectMapper");
const pluralize = require("pluralize");
const Exceptions_1 = require("../../Exceptions");
const Constants_1 = require("../../Constants");
const TypeUtil_1 = require("../../Utility/TypeUtil");
const DateUtil_1 = require("../../Utility/DateUtil");
const Serializer_1 = require("../../Mapping/Json/Serializer");
class DocumentConventions {
    constructor() {
        this._registeredIdConventions = new Map();
        this._registeredIdPropertyNames = new Map();
        this._idPropertyCache = new Map();
        this._entityObjectMapper = new ObjectMapper_1.TypesAwareObjectMapper({
            knownTypes: this._knownEntityTypes,
            dateFormat: DateUtil_1.DateUtil.DEFAULT_DATE_FORMAT
        });
        this._readBalanceBehavior = "None";
        this._identityPartsSeparator = "/";
        this._findIdentityPropertyNameFromCollectionName = entityName => "id";
        this._findJsType = (id, doc) => {
            const metadata = doc[Constants_1.CONSTANTS.Documents.Metadata.KEY];
            if (metadata) {
                const jsType = metadata[Constants_1.CONSTANTS.Documents.Metadata.RAVEN_JS_TYPE];
                return this._knownEntityTypes.get(jsType) || null;
            }
            return null;
        };
        this._findJsTypeName = (ctorOrTypeChecker) => {
            if (!ctorOrTypeChecker) {
                return null;
            }
            if (TypeUtil_1.TypeUtil.isFunction(ctorOrTypeChecker["isType"])) {
                return ctorOrTypeChecker.name;
            }
            return ctorOrTypeChecker.name;
        };
        this._transformClassCollectionNameToDocumentIdPrefix =
                collectionName => DocumentConventions.defaultTransformCollectionNameToDocumentIdPrefix(collectionName);
        this._findCollectionName = type => DocumentConventions.defaultGetCollectionName(type);
        this._maxNumberOfRequestsPerSession = 30;
        this._maxHttpCacheSize = 128 * 1024 * 1024;
        this._knownEntityTypes = new Map();
        this._entityObjectMapper = new ObjectMapper_1.TypesAwareObjectMapper({
            dateFormat: DateUtil_1.DateUtil.DEFAULT_DATE_FORMAT,
            knownTypes: this._knownEntityTypes
        });
        this._entityJsonSerializer = Serializer_1.JsonSerializer.getDefaultForEntities();
    }
    static get defaultConventions() {
        return this._defaults;
    }
    get entityObjectMapper() {
        return this._entityObjectMapper;
    }
    set entityObjectMapper(value) {
        this._entityObjectMapper = value;
    }
    get entitySerializer() {
        return this._entityJsonSerializer;
    }
    set entitySerializer(value) {
        this._entityJsonSerializer = value;
    }
    get readBalanceBehavior() {
        return this._readBalanceBehavior;
    }
    set readBalanceBehavior(value) {
        this._readBalanceBehavior = value;
    }
    deserializeEntityFromJson(documentType, document) {
        try {
            return this.entityObjectMapper.toObjectLiteral(document);
        }
        catch (err) {
            Exceptions_1.throwError("RavenException", "Cannot deserialize entity", err);
        }
    }
    get maxNumberOfRequestsPerSession() {
        return this._maxNumberOfRequestsPerSession;
    }
    set maxNumberOfRequestsPerSession(value) {
        this._maxNumberOfRequestsPerSession = value;
    }
    get maxHttpCacheSize() {
        return this._maxHttpCacheSize;
    }
    set maxHttpCacheSize(value) {
        this._maxHttpCacheSize = value;
    }
    isThrowIfQueryPageSizeIsNotSet() {
        return this._throwIfQueryPageSizeIsNotSet;
    }
    setThrowIfQueryPageSizeIsNotSet(throwIfQueryPageSizeIsNotSet) {
        this._assertNotFrozen();
        this._throwIfQueryPageSizeIsNotSet = throwIfQueryPageSizeIsNotSet;
    }
    isUseOptimisticConcurrency() {
        return this._useOptimisticConcurrency;
    }
    setUseOptimisticConcurrency(useOptimisticConcurrency) {
        this._useOptimisticConcurrency = useOptimisticConcurrency;
    }
    get findJsType() {
        return this._findJsType;
    }
    set findJsType(value) {
        this._assertNotFrozen();
        this._findJsType = value;
    }
    get findJsTypeName() {
        return this._findJsTypeName;
    }
    set findJsTypeName(value) {
        this._assertNotFrozen();
        this._findJsTypeName = value;
    }
    get findCollectionName() {
        return this._findCollectionName;
    }
    set findCollectionName(value) {
        this._assertNotFrozen();
        this._findCollectionName = value;
    }
    get findIdentityPropertyNameFromCollectionName() {
        return this._findIdentityPropertyNameFromCollectionName;
    }
    set findIdentityPropertyNameFromCollectionName(value) {
        this._findIdentityPropertyNameFromCollectionName = value;
    }
    get documentIdGenerator() {
        return this._documentIdGenerator;
    }
    set documentIdGenerator(value) {
        this._assertNotFrozen();
        this._documentIdGenerator = value;
    }
    get identityPartsSeparator() {
        return this._identityPartsSeparator;
    }
    set identityPartsSeparator(value) {
        this._identityPartsSeparator = value;
    }
    get disableTopologyUpdates() {
        return this._disableTopologyUpdates;
    }
    set disableTopologyUpdates(value) {
        this._disableTopologyUpdates = value;
    }
    get throwIfQueryPageSizeIsNotSet() {
        return this._throwIfQueryPageSizeIsNotSet;
    }
    set throwIfQueryPageSizeIsNotSet(value) {
        this._assertNotFrozen();
        this._throwIfQueryPageSizeIsNotSet = value;
    }
    get transformClassCollectionNameToDocumentIdPrefix() {
        return this._transformClassCollectionNameToDocumentIdPrefix;
    }
    set transformClassCollectionNameToDocumentIdPrefix(value) {
        this._transformClassCollectionNameToDocumentIdPrefix = value;
    }
    static defaultGetCollectionName(ctorOrTypeChecker) {
        if (!ctorOrTypeChecker) {
            return null;
        }
        if (!TypeUtil_1.TypeUtil.isObjectTypeDescriptor(ctorOrTypeChecker)) {
            Exceptions_1.throwError("InvalidArgumentException", "Invalid class argument.");
        }
        if (!ctorOrTypeChecker.name) {
            Exceptions_1.throwError("InvalidArgumentException", "Type name cannot be null or undefined.");
        }
        let result = this._cachedDefaultTypeCollectionNames.get(ctorOrTypeChecker);
        if (result) {
            return result;
        }
        if (typeof (ctorOrTypeChecker) === "string") {
            result = pluralize.plural(ctorOrTypeChecker);
        }
        else {
            result = pluralize.plural(ctorOrTypeChecker.name);
        }
        this._cachedDefaultTypeCollectionNames.set(ctorOrTypeChecker, result);
        return result;
    }
    getCollectionNameForType(ctorOrTypeChecker) {
        const collectionName = this._findCollectionName(ctorOrTypeChecker);
        return collectionName || DocumentConventions.defaultGetCollectionName(ctorOrTypeChecker);
    }
    getCollectionNameForEntity(entity) {
        if (!entity) {
            return null;
        }
        const typeDescriptor = this.getEntityTypeDescriptor(entity);
        if (typeDescriptor) {
            return this.getCollectionNameForType(typeDescriptor);
        }
        if (this._findCollectionNameForObjectLiteral && entity.constructor === Object) {
            return this._findCollectionNameForObjectLiteral(entity);
        }
        return null;
    }
    get findCollectionNameForObjectLiteral() {
        return this._findCollectionNameForObjectLiteral;
    }
    set findCollectionNameForObjectLiteral(value) {
        this._findCollectionNameForObjectLiteral = value;
    }
    getEntityTypeDescriptor(entity) {
        if (TypeUtil_1.TypeUtil.isClass(entity.constructor)) {
            return entity.constructor;
        }
        for (const entityType of this._knownEntityTypes.values()) {
            if (!TypeUtil_1.TypeUtil.isObjectLiteralTypeDescriptor(entityType)) {
                continue;
            }
            if (entityType.isType(entity)) {
                return entityType;
            }
        }
        return null;
    }
    generateDocumentId(database, entity) {
        const entityTypeDescriptor = this.getEntityTypeDescriptor(entity);
        for (const [typeDescriptor, idConvention] of this._registeredIdConventions) {
            if (TypeUtil_1.TypeUtil.isType(entity, typeDescriptor)) {
                return Promise.resolve(idConvention(database, entity));
            }
        }
        return this._documentIdGenerator(database, entity);
    }
    registerIdConvention(ctorOrTypeChecker, idConvention) {
        this._assertNotFrozen();
        this._registeredIdConventions.set(ctorOrTypeChecker, idConvention);
        return this;
    }
    registerEntityIdPropertyName(ctorOrTypeChecker, idProperty) {
        this._registeredIdPropertyNames.set(ctorOrTypeChecker, idProperty);
    }
    getJsType(id, document) {
        return this._findJsType(id, document);
    }
    getJsTypeName(entityType) {
        return this._findJsTypeName(entityType);
    }
    clone() {
        const cloned = new DocumentConventions();
        return Object.assign(cloned, this);
    }
    getIdentityProperty(documentType) {
        const typeDescriptor = this.findEntityType(documentType);
        return this._registeredIdPropertyNames.get(typeDescriptor)
            || Constants_1.CONSTANTS.Documents.Metadata.ID_PROPERTY;
    }
    updateFrom(configuration) {
        if (!configuration) {
            return;
        }
        const orig = this._originalConfiguration;
        if (configuration.disabled && !orig) {
            return;
        }
        if (configuration.disabled && orig) {
            this._maxNumberOfRequestsPerSession = orig.maxNumberOfRequestsPerSession;
            this._readBalanceBehavior = orig.readBalanceBehavior;
            this._originalConfiguration = null;
            return;
        }
        if (!this._originalConfiguration) {
            this._originalConfiguration = {
                etag: -1,
                maxNumberOfRequestsPerSession: this._maxNumberOfRequestsPerSession,
                readBalanceBehavior: this._readBalanceBehavior,
                disabled: false
            };
        }
        this._maxNumberOfRequestsPerSession =
            configuration.maxNumberOfRequestsPerSession || this._originalConfiguration.maxNumberOfRequestsPerSession;
        this._readBalanceBehavior =
            configuration.readBalanceBehavior || this._originalConfiguration.readBalanceBehavior;
    }
    static defaultTransformCollectionNameToDocumentIdPrefix(collectionName) {
        const upperCaseRegex = /[A-Z]/g;
        const upperCount = collectionName.match(upperCaseRegex).length;
        if (upperCount <= 1) {
            return collectionName.toLowerCase();
        }
        return collectionName;
    }
    freeze() {
        this._frozen = true;
    }
    _assertNotFrozen() {
        if (this._frozen) {
            Exceptions_1.throwError("RavenException", "Conventions has been frozen after documentStore.initialize() and no changes can be applied to them");
        }
    }
    get knownEntityTypesByName() {
        return this._knownEntityTypes;
    }
    get knownEntityTypes() {
        return Array.from(this._knownEntityTypes.values());
    }
    registerEntityType(entityType, name) {
        if (!TypeUtil_1.TypeUtil.isObjectTypeDescriptor(entityType)) {
            Exceptions_1.throwError("InvalidArgumentException", "Entity type must be a constructor or an object literal descriptor.");
        }
        if (name) {
            this._knownEntityTypes.set(name, entityType);
        }
        this._knownEntityTypes.set(entityType.name, entityType);
        return this;
    }
    tryRegisterEntityType(docType) {
        if (TypeUtil_1.TypeUtil.isObjectTypeDescriptor(docType)) {
            this.registerEntityType(docType);
        }
        return this;
    }
    findEntityType(docTypeOrtypeName) {
        if (!docTypeOrtypeName) {
            return null;
        }
        if (typeof (docTypeOrtypeName) !== "string") {
            return docTypeOrtypeName;
        }
        return this._knownEntityTypes.get(docTypeOrtypeName);
    }
}
DocumentConventions._defaults = new DocumentConventions();
DocumentConventions._cachedDefaultTypeCollectionNames = new Map();
exports.DocumentConventions = DocumentConventions;
DocumentConventions.defaultConventions.freeze();
