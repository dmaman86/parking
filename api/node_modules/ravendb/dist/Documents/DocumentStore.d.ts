import { RequestExecutor } from "../Http/RequestExecutor";
import { DocumentStoreBase } from "./DocumentStoreBase";
import { IDocumentStore } from "./IDocumentStore";
import { MaintenanceOperationExecutor } from "./Operations/MaintenanceOperationExecutor";
import { OperationExecutor } from "./Operations/OperationExecutor";
import { IDocumentSession, ISessionOptions } from "./Session/IDocumentSession";
import { IDisposable } from "../Types/Contracts";
import { IAuthOptions } from "../Auth/AuthOptions";
export declare class DocumentStore extends DocumentStoreBase {
    private _log;
    private _requestExecutors;
    private _multiDbHiLo;
    private _maintenanceOperationExecutor;
    private _operationExecutor;
    private _identifier;
    private _aggressiveCachingUsed;
    constructor(url: string, database: string);
    constructor(urls: string[], database: string);
    constructor(url: string, database: string, authOptions: IAuthOptions);
    constructor(urls: string[], database: string, authOptions: IAuthOptions);
    identifier: string;
    dispose(): void;
    openSession(): IDocumentSession;
    openSession(database: string): IDocumentSession;
    openSession(sessionOpts: ISessionOptions): IDocumentSession;
    getRequestExecutor(database?: string): RequestExecutor;
    initialize(): IDocumentStore;
    protected _assertValidConfiguration(): void;
    disableAggressiveCaching(): IDisposable;
    disableAggressiveCaching(database: string): IDisposable;
    readonly maintenance: MaintenanceOperationExecutor;
    readonly operations: OperationExecutor;
}
