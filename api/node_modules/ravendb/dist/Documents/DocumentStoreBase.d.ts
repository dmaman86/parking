/// <reference types="node" />
import { MaintenanceOperationExecutor } from "./Operations/MaintenanceOperationExecutor";
import { EventEmitter } from "events";
import { IDocumentStore } from "./IDocumentStore";
import { IAuthOptions } from "../Auth/AuthOptions";
import { SessionBeforeStoreEventArgs, SessionAfterSaveChangesEventArgs, SessionBeforeQueryEventArgs, SessionBeforeDeleteEventArgs } from "./Session/SessionEvents";
import { Todo } from "../Types";
import { OperationExecutor } from "./Operations/OperationExecutor";
import { SessionOptions } from "http2";
import { IDocumentSession } from "./Session/IDocumentSession";
import { DocumentSession } from "./Session/DocumentSession";
import { AbstractIndexCreationTask } from "./Indexes";
import { DocumentConventions } from "./Conventions/DocumentConventions";
import { RequestExecutor } from "../Http/RequestExecutor";
import { IDisposable } from "../Types/Contracts";
export declare abstract class DocumentStoreBase extends EventEmitter implements IDocumentStore {
    abstract disableAggressiveCaching(): IDisposable;
    abstract disableAggressiveCaching(database: string): IDisposable;
    protected constructor();
    abstract dispose(): void;
    protected _disposed: boolean;
    isDisposed(): boolean;
    abstract identifier: string;
    abstract initialize(): IDocumentStore;
    abstract openSession(): IDocumentSession;
    abstract openSession(database: string): IDocumentSession;
    abstract openSession(sessionOptions: SessionOptions): IDocumentSession;
    executeIndex(task: AbstractIndexCreationTask): Promise<void>;
    executeIndex(task: AbstractIndexCreationTask, database?: string): Promise<void>;
    private _conventions;
    conventions: DocumentConventions;
    protected _urls: string[];
    urls: string[];
    protected _initialized: boolean;
    private _authOptions;
    protected _ensureNotDisposed(): void;
    protected _assertInitialized(): void;
    protected _database: string;
    database: string;
    authOptions: IAuthOptions;
    abstract getRequestExecutor(databaseName?: string): RequestExecutor;
    protected _eventHandlers: Array<[string, (eventArgs: any) => void]>;
    addSessionListener(eventName: "beforeStore", eventHandler: (eventArgs: SessionBeforeStoreEventArgs) => void): this;
    addSessionListener(eventName: "afterSaveChanges", eventHandler: (eventArgs: SessionAfterSaveChangesEventArgs) => void): this;
    addSessionListener(eventName: "beforeQuery", eventHandler: (eventArgs: SessionBeforeQueryEventArgs) => void): this;
    addSessionListener(eventName: "beforeDelete", eventHandler: (eventArgs: SessionBeforeDeleteEventArgs) => void): this;
    removeSessionListener(eventName: "beforeStore", eventHandler: (eventArgs: SessionBeforeStoreEventArgs) => void): void;
    removeSessionListener(eventName: "afterSaveChanges", eventHandler: (eventArgs: Todo) => void): void;
    removeSessionListener(eventName: "beforeQuery", eventHandler: (eventArgs: Todo) => void): void;
    removeSessionListener(eventName: "beforeDelete", eventHandler: (eventArgs: Todo) => void): void;
    protected _registerEvents(session: DocumentSession): void;
    abstract maintenance: MaintenanceOperationExecutor;
    abstract operations: OperationExecutor;
    executeIndexes(tasks: AbstractIndexCreationTask[]): Promise<void>;
    executeIndexes(tasks: AbstractIndexCreationTask[], database: string): Promise<void>;
}
