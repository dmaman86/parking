"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const Exceptions_1 = require("../Exceptions");
const UriUtil_1 = require("../Utility/UriUtil");
const DocumentConventions_1 = require("./Conventions/DocumentConventions");
const IndexCreation_1 = require("../Documents/Indexes/IndexCreation");
const PutIndexesOperation_1 = require("./Operations/Indexes/PutIndexesOperation");
class DocumentStoreBase extends events_1.EventEmitter {
    constructor() {
        super();
        this._urls = [];
        this._eventHandlers = [];
    }
    isDisposed() {
        return this._disposed;
    }
    executeIndex(task, database) {
        this._assertInitialized();
        return task.execute(this, this.conventions, database);
    }
    get conventions() {
        if (!this._conventions) {
            this._conventions = new DocumentConventions_1.DocumentConventions();
        }
        return this._conventions;
    }
    set conventions(value) {
        this._conventions = value;
    }
    get urls() {
        return this._urls;
    }
    set urls(value) {
        if (!value || !Array.isArray(value)) {
            Exceptions_1.throwError("InvalidArgumentException", `Invalid urls array passed: ${value.toString()}.`);
        }
        for (let i = 0; i < value.length; i++) {
            if (!value[i]) {
                Exceptions_1.throwError("InvalidArgumentException", `Url cannot be null or undefined - url index: ${i}`);
            }
            UriUtil_1.validateUri(value[i]);
            value[i] = value[i].replace(/\/$/, "");
        }
        this._urls = value;
    }
    _ensureNotDisposed() {
        if (this._disposed) {
            Exceptions_1.throwError("InvalidOperationException", "The document store has already been disposed and cannot be used");
        }
    }
    _assertInitialized() {
        if (!this._initialized) {
            Exceptions_1.throwError("InvalidOperationException", "You cannot open a session or access the database commands before initializing the document store. "
                + "Did you forget calling initialize()?");
        }
    }
    get database() {
        return this._database;
    }
    set database(value) {
        this._database = value;
    }
    get authOptions() {
        return this._authOptions;
    }
    set authOptions(value) {
        this._authOptions = value;
    }
    addSessionListener(eventName, eventHandler) {
        this._eventHandlers.push([eventName, eventHandler]);
        return this;
    }
    removeSessionListener(eventName, eventHandler) {
        const toRemove = this._eventHandlers
            .filter(x => x[0] === eventName && x[1] === eventHandler)[0];
        if (toRemove) {
            this._eventHandlers.splice(this._eventHandlers.indexOf(toRemove), 1);
        }
    }
    _registerEvents(session) {
        this._eventHandlers.forEach(([eventName, eventHandler]) => {
            session.on(eventName, eventHandler);
        });
    }
    executeIndexes(tasks, database) {
        this._assertInitialized();
        return Promise.resolve()
            .then(() => {
            const indexesToAdd = IndexCreation_1.IndexCreation.createIndexesToAdd(tasks, this.conventions);
            return this.maintenance
                .forDatabase(database || this.database)
                .send(new PutIndexesOperation_1.PutIndexesOperation(...indexesToAdd));
        })
            .then(() => { });
    }
}
exports.DocumentStoreBase = DocumentStoreBase;
