import { IDocumentSession, ISessionOptions } from "./Session/IDocumentSession";
import { IStoreAuthOptions } from "../Auth/AuthOptions";
import { SessionBeforeStoreEventArgs, SessionAfterSaveChangesEventArgs, SessionBeforeQueryEventArgs, SessionBeforeDeleteEventArgs } from "./Session/SessionEvents";
import { IDisposable } from "../Types/Contracts";
import { Todo } from "../Types";
import { MaintenanceOperationExecutor } from "./Operations/MaintenanceOperationExecutor";
import { OperationExecutor } from "./Operations/OperationExecutor";
import { AbstractIndexCreationTask } from "./Indexes";
import { RequestExecutor } from "../Http/RequestExecutor";
import { DocumentConventions } from "./Conventions/DocumentConventions";
export interface SessionEventsProxy {
    addSessionListener(eventName: "beforeStore", eventHandler: (eventArgs: SessionBeforeStoreEventArgs) => void): this;
    addSessionListener(eventName: "afterSaveChanges", eventHandler: (eventArgs: Todo) => void): this;
    addSessionListener(eventName: "beforeQuery", eventHandler: (eventArgs: Todo) => void): this;
    addSessionListener(eventName: "beforeDelete", eventHandler: (eventArgs: Todo) => void): this;
    removeSessionListener(eventName: "beforeStore", eventHandler: (eventArgs: SessionBeforeStoreEventArgs) => void): void;
    removeSessionListener(eventName: "afterSaveChanges", eventHandler: (eventArgs: Todo) => void): void;
    removeSessionListener(eventName: "beforeQuery", eventHandler: (eventArgs: Todo) => void): void;
    removeSessionListener(eventName: "beforeDelete", eventHandler: (eventArgs: Todo) => void): void;
}
export declare type DocumentStoreEvent = "beforeDispose" | "afterDispose";
export interface DocumentStoreEventEmitter {
    on(eventName: "beforeDispose", eventHandler: () => void): this;
    on(eventName: "afterDispose", eventHandler: (callback: () => void) => void): this;
    on(eventName: "executorsDisposed", eventHandler: (callback: () => void) => void): this;
    once(eventName: "beforeDispose", eventHandler: () => void): this;
    once(eventName: "afterDispose", eventHandler: (callback: () => void) => void): this;
    once(eventName: "executorsDisposed", eventHandler: (callback: () => void) => void): this;
    removeListener(eventName: "beforeDispose", eventHandler: () => void): void;
    removeListener(eventName: "afterDispose", eventHandler: (callback: () => void) => void): void;
    removeListener(eventName: "executorsDisposed", eventHandler: (callback: () => void) => void): void;
}
export interface IDocumentStore extends IDisposable, SessionEventsProxy, DocumentStoreEventEmitter {
    openSession(database?: string): IDocumentSession;
    openSession(options?: ISessionOptions): IDocumentSession;
    openSession(database?: string, options?: ISessionOptions): IDocumentSession;
    disableAggressiveCaching(): IDisposable;
    disableAggressiveCaching(database: string): IDisposable;
    identifier: string;
    initialize(): IDocumentStore;
    executeIndex(task: AbstractIndexCreationTask): Promise<void>;
    executeIndex(task: AbstractIndexCreationTask, database: string): Promise<void>;
    executeIndexes(tasks: AbstractIndexCreationTask[]): Promise<void>;
    executeIndexes(tasks: AbstractIndexCreationTask[], database: string): Promise<void>;
    authOptions: IStoreAuthOptions;
    conventions: DocumentConventions;
    urls: string[];
    database: string;
    getRequestExecutor(databaseName?: string): RequestExecutor;
    maintenance: MaintenanceOperationExecutor;
    operations: OperationExecutor;
    addSessionListener(eventName: "beforeStore", eventHandler: (eventArgs: SessionBeforeStoreEventArgs) => void): this;
    addSessionListener(eventName: "afterSaveChanges", eventHandler: (eventArgs: SessionAfterSaveChangesEventArgs) => void): this;
    addSessionListener(eventName: "beforeQuery", eventHandler: (eventArgs: SessionBeforeQueryEventArgs) => void): this;
    addSessionListener(eventName: "beforeDelete", eventHandler: (eventArgs: SessionBeforeDeleteEventArgs) => void): this;
}
