"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const qs = require("qs");
const DateUtil_1 = require("../../../Utility/DateUtil");
const RavenCommand_1 = require("../../../Http/RavenCommand");
const Exceptions_1 = require("../../../Exceptions");
class NextHiloCommand extends RavenCommand_1.RavenCommand {
    constructor(tag, lastBatchSize, lastRangeAt, identityPartsSeparator, lastRangeMax) {
        super();
        if (!tag) {
            Exceptions_1.throwError("InvalidArgumentException", "tag cannot be null.");
        }
        if (!identityPartsSeparator) {
            Exceptions_1.throwError("InvalidArgumentException", "identityPartsSeparator cannot be null.");
        }
        this._tag = tag;
        this._lastBatchSize = lastBatchSize;
        this._lastRangeAt = lastRangeAt;
        this._identityPartsSeparator = identityPartsSeparator;
        this._lastRangeMax = lastRangeMax;
    }
    createRequest(node) {
        const lastRangeAt = this._lastRangeAt
            ? DateUtil_1.DateUtil.stringify(this._lastRangeAt)
            : "";
        const queryString = qs.stringify({
            tag: this._tag,
            lastBatchSize: this._lastBatchSize,
            lastRangeAt,
            identityPartsSeparator: this._identityPartsSeparator,
            lastMax: this._lastRangeMax
        });
        const uri = `${node.url}/databases/${node.database}/hilo/next?${queryString}`;
        return { uri };
    }
    setResponse(response, fromCache) {
        this.result = this._parseResponseDefault(response, {
            nestedTypes: {
                lastRangeAt: "date"
            }
        });
    }
    get isReadRequest() {
        return true;
    }
}
exports.NextHiloCommand = NextHiloCommand;
