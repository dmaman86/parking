"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Exceptions_1 = require("../../Exceptions");
const TypeUtil_1 = require("../../Utility/TypeUtil");
class GenerateEntityIdOnTheClient {
    constructor(conventions, generateId) {
        this._conventions = conventions;
        this._generateId = generateId;
    }
    _getIdentityProperty(entityType) {
        return this._conventions.getIdentityProperty(entityType);
    }
    tryGetIdFromInstance(entity, idCallback) {
        if (!entity) {
            Exceptions_1.throwError("InvalidArgumentException", "Entity cannot be null or undefined.");
        }
        const resultCallback = (result) => {
            if (idCallback) {
                idCallback(result);
            }
        };
        try {
            const docType = TypeUtil_1.TypeUtil.findType(entity, this._conventions.knownEntityTypes);
            const identityProperty = this._getIdentityProperty(docType);
            if (identityProperty) {
                const value = entity[identityProperty];
                if (typeof (value) === "string") {
                    resultCallback(value);
                    return true;
                }
            }
            resultCallback(null);
            return false;
        }
        catch (e) {
            Exceptions_1.throwError("InvalidOperationException", "Error trying to get ID from instance.");
        }
    }
    getOrGenerateDocumentId(entity) {
        let id;
        this.tryGetIdFromInstance(entity, (idVal) => id = idVal);
        return Promise.resolve()
            .then(() => {
            return id || this._generateId(entity);
        })
            .then(id => {
            if (id && id.startsWith("/")) {
                Exceptions_1.throwError("InvalidOperationException", "Cannot use value '" + id + "' as a document id because it begins with a '/'");
            }
            return id;
        });
    }
    generateDocumentKeyForStorage(entity) {
        return Promise.resolve()
            .then(() => this.getOrGenerateDocumentId(entity))
            .then(id => {
            this.trySetIdentity(entity, id);
            return id;
        });
    }
    trySetIdentity(entity, id) {
        const docType = TypeUtil_1.TypeUtil.findType(entity, this._conventions.knownEntityTypes);
        const identityProperty = this._conventions.getIdentityProperty(docType);
        if (!identityProperty) {
            return;
        }
        entity[identityProperty] = id;
    }
}
exports.GenerateEntityIdOnTheClient = GenerateEntityIdOnTheClient;
