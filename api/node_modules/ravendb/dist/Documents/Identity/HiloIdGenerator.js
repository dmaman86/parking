"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BluebirdPromise = require("bluebird");
const semaphore = require("semaphore");
const DateUtil_1 = require("../../Utility/DateUtil");
const SemaphoreUtil_1 = require("../../Utility/SemaphoreUtil");
const StringUtil_1 = require("../../Utility/StringUtil");
const HiloReturnCommand_1 = require("./Commands/HiloReturnCommand");
const NextHiloCommand_1 = require("./Commands/NextHiloCommand");
const HiloRangeValue_1 = require("./HiloRangeValue");
class HiloIdGenerator {
    constructor(store, dbName, tag) {
        this._prefix = null;
        this._lastBatchSize = 0;
        this._serverTag = null;
        this._generatorLock = semaphore();
        this._lastRangeAt = DateUtil_1.DateUtil.zeroDate();
        this._range = new HiloRangeValue_1.HiloRangeValue();
        this._conventions = store.conventions;
        this._identityPartsSeparator = this._conventions.identityPartsSeparator;
        this._tag = tag;
        this._store = store;
        this._dbName = dbName || store.database;
    }
    generateDocumentId(entity) {
        return Promise.resolve()
            .then(() => this.nextId())
            .then((nextId) => this._getDocumentIdFromId(nextId));
    }
    _getDocumentIdFromId(nextId) {
        return this._prefix + nextId + "-" + this._serverTag;
    }
    nextId() {
        const getNextIdWithinRange = () => {
            const range = this._range;
            let id = range.increment();
            if (id <= range.maxId) {
                return Promise.resolve(id);
            }
            const acquiredSemContext = SemaphoreUtil_1.acquireSemaphore(this._generatorLock, {
                contextName: `${this.constructor.name}_${this._tag}`
            });
            return Promise.resolve(acquiredSemContext.promise)
                .then(() => {
                const maybeNewRange = this._range;
                if (maybeNewRange !== range) {
                    id = maybeNewRange.increment();
                    if (id <= maybeNewRange.maxId) {
                        return BluebirdPromise.resolve(id)
                            .finally(() => acquiredSemContext.dispose());
                    }
                }
                return BluebirdPromise.resolve(this._getNextRange())
                    .finally(() => acquiredSemContext.dispose())
                    .then(() => getNextIdWithinRange());
            });
        };
        return getNextIdWithinRange();
    }
    returnUnusedRange() {
        const range = this._range;
        const executor = this._store.getRequestExecutor(this._dbName);
        return executor.execute(new HiloReturnCommand_1.HiloReturnCommand(this._tag, range.current, range.maxId));
    }
    _getNextRange() {
        const hiloCmd = new NextHiloCommand_1.NextHiloCommand(this._tag, this._lastBatchSize, this._lastRangeAt, this._identityPartsSeparator, this._range.maxId);
        return this._store.getRequestExecutor(this._dbName).execute(hiloCmd)
            .then(() => {
            const result = hiloCmd.result;
            this._prefix = result.prefix;
            this._lastBatchSize = result.lastSize;
            this._serverTag = result.serverTag || null;
            this._lastRangeAt = result.lastRangeAt;
            this._range = new HiloRangeValue_1.HiloRangeValue(result.low, result.high);
        });
    }
    _assembleDocumentId(currentRangeValue) {
        const prefix = (this._prefix || "");
        const serverTag = this._serverTag;
        if (serverTag) {
            return StringUtil_1.StringUtil.format("{0}{1}-{2}", prefix, currentRangeValue, serverTag);
        }
        return StringUtil_1.StringUtil.format("{0}{1}", prefix, currentRangeValue);
    }
    get range() {
        return this._range;
    }
    set range(value) {
        this._range = value;
    }
}
exports.HiloIdGenerator = HiloIdGenerator;
