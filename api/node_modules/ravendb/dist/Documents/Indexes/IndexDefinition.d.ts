import { IndexPriority, FieldStorage, FieldIndexing, FieldTermVector, IndexLockMode, IndexType } from "./Enums";
import { IndexFieldOptions } from "./IndexFieldOptions";
import { SpatialOptions } from "./Spatial";
import { DocumentConventions } from "../Conventions/DocumentConventions";
export interface IndexConfiguration {
    [key: string]: string;
}
export declare class IndexDefinition {
    name: string;
    priority: IndexPriority;
    lockMode: IndexLockMode;
    indexType: IndexType;
    additionalSources: {
        [key: string]: string;
    };
    maps: Set<string>;
    reduce: string;
    fields: {
        [fieldName: string]: IndexFieldOptions;
    };
    configuration: IndexConfiguration;
    outputReduceToCollection: string;
    toString(): string;
    type: IndexType;
    private _detectStaticIndexType();
}
export declare class IndexDefinitionBuilder {
    indexName: string;
    map: string;
    reduce: string;
    priority: IndexPriority;
    lockMode: IndexLockMode;
    additionalSources: {
        [key: string]: string;
    };
    storesStrings: {
        [key: string]: FieldStorage;
    };
    indexesStrings: {
        [key: string]: FieldIndexing;
    };
    analyzersStrings: {
        [key: string]: string;
    };
    suggestionsOptions: Set<string>;
    termVectorsStrings: {
        [key: string]: FieldTermVector;
    };
    spatialIndexesStrings: {
        [key: string]: SpatialOptions;
    };
    outputReduceToCollection: string;
    constructor(indexName?: string);
    toIndexDefinition(conventions: DocumentConventions, validateMap?: boolean): IndexDefinition;
    private _applyValues<T>(indexDefinition, values, action);
}
