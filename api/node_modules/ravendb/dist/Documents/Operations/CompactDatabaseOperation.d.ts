import { HttpRequestBase } from "../../Primitives/Http";
import { IServerOperation, OperationIdResult, OperationResultType } from "./OperationAbstractions";
import { CompactSettings } from "../../ServerWide/CompactSettings";
import { RavenCommand } from "../../Http/RavenCommand";
import { DocumentConventions } from "../Conventions/DocumentConventions";
import { ServerNode } from "../../Http/ServerNode";
export declare class CompactDatabaseOperation implements IServerOperation<OperationIdResult> {
    private _compactSettings;
    constructor(compactSettings: CompactSettings);
    getCommand(conventions: DocumentConventions): RavenCommand<OperationIdResult>;
    readonly resultType: OperationResultType;
}
export declare class CompactDatabaseCommand extends RavenCommand<OperationIdResult> {
    private _compactSettings;
    constructor(conventions: DocumentConventions, compactSettings: CompactSettings);
    createRequest(node: ServerNode): HttpRequestBase;
    setResponse(response: string, fromCache: boolean): void;
    readonly isReadRequest: boolean;
}
