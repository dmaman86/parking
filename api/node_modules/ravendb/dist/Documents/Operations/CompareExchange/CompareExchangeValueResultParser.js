"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CompareExchangeValue_1 = require("./CompareExchangeValue");
const Serializer_1 = require("../../../Mapping/Json/Serializer");
const Exceptions_1 = require("../../../Exceptions");
const TypeUtil_1 = require("../../../Utility/TypeUtil");
class CompareExchangeValueResultParser {
    static getValues(response, conventions, clazz) {
        const jsonResponse = Serializer_1.JsonSerializer.getDefault().deserialize(response);
        const results = {};
        const items = jsonResponse["Results"];
        if (!items) {
            Exceptions_1.throwError("InvalidOperationException", "Response is invalid. Results is missing.");
        }
        for (const item of items) {
            if (!item) {
                Exceptions_1.throwError("InvalidOperationException", "Response is invalid. Item is null");
            }
            const key = item["Key"];
            if (!key) {
                Exceptions_1.throwError("InvalidOperationException", "Response is invalid. Key is missing.");
            }
            const index = item["Index"];
            if (!index) {
                Exceptions_1.throwError("InvalidOperationException", "Response is invalid. Index is missing.");
            }
            const raw = item["Value"];
            if (!raw) {
                Exceptions_1.throwError("InvalidOperationException", "Response is invalid. Value is missing.");
            }
            if (TypeUtil_1.TypeUtil.isPrimitiveType(clazz) || !clazz) {
                const rawValue = raw["Object"];
                results[key] = new CompareExchangeValue_1.CompareExchangeValue(key, index, rawValue);
            }
            else {
                const obj = raw["Object"];
                if (!obj) {
                    results[key] = new CompareExchangeValue_1.CompareExchangeValue(key, index, null);
                }
                else {
                    const entityType = conventions.findEntityType(clazz);
                    const entity = conventions.deserializeEntityFromJson(entityType, obj);
                    results[key] = new CompareExchangeValue_1.CompareExchangeValue(key, index, entity);
                }
            }
        }
        return results;
    }
    static getValue(response, conventions, clazz) {
        if (!response) {
            return null;
        }
        const values = CompareExchangeValueResultParser.getValues(response, conventions, clazz);
        const itemsKeys = Object.keys(values);
        if (!values || !itemsKeys.length) {
            return null;
        }
        return values[itemsKeys[0]];
    }
}
exports.CompareExchangeValueResultParser = CompareExchangeValueResultParser;
