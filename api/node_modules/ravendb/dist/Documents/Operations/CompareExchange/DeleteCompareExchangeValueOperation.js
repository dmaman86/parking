"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CompareExchangeResult_1 = require("./CompareExchangeResult");
const RavenCommand_1 = require("../../../Http/RavenCommand");
const Exceptions_1 = require("../../../Exceptions");
class DeleteCompareExchangeValueOperation {
    constructor(key, index, clazz) {
        this._key = key;
        this._index = index;
        this._clazz = clazz;
    }
    getCommand(store, conventions, cache) {
        return new RemoveCompareExchangeCommand(this._key, this._index, conventions, this._clazz);
    }
    get resultType() {
        return "CommandResult";
    }
}
exports.DeleteCompareExchangeValueOperation = DeleteCompareExchangeValueOperation;
class RemoveCompareExchangeCommand extends RavenCommand_1.RavenCommand {
    constructor(key, index, conventions, clazz) {
        super();
        if (!key) {
            Exceptions_1.throwError("InvalidArgumentException", "The key argument must have value.");
        }
        this._clazz = clazz;
        this._key = key;
        this._index = index;
        this._conventions = conventions;
    }
    get isReadRequest() {
        return true;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database + "/cmpxchg?key=" + this._key + "&index=" + this._index;
        return {
            method: "DELETE",
            uri
        };
    }
    setResponse(response, fromCache) {
        this.result = CompareExchangeResult_1.CompareExchangeResult.parseFromString(response, this._conventions, this._clazz);
    }
}
exports.RemoveCompareExchangeCommand = RemoveCompareExchangeCommand;
