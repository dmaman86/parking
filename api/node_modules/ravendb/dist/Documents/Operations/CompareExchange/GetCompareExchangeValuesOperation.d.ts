import { HttpRequestBase } from "../../../Primitives/Http";
import { IOperation, OperationResultType } from "../OperationAbstractions";
import { CompareExchangeValue } from "./CompareExchangeValue";
import { ClassConstructor } from "../../../Types";
import { IDocumentStore } from "../../IDocumentStore";
import { DocumentConventions } from "../../Conventions/DocumentConventions";
import { HttpCache } from "../../../Http/HttpCache";
import { RavenCommand } from "../../../Http/RavenCommand";
import { ServerNode } from "../../../Http/ServerNode";
export interface GetCompareExchangeValuesParameters<T> {
    keys?: string[];
    startWith?: string;
    start?: number;
    pageSize?: number;
    clazz?: ClassConstructor<T>;
}
export declare class GetCompareExchangeValuesOperation<T> implements IOperation<{
    [key: string]: CompareExchangeValue<T>;
}> {
    private _clazz;
    private _keys;
    private _startWith;
    private _start;
    private _pageSize;
    readonly keys: string[];
    readonly startWith: string;
    readonly start: number;
    readonly pageSize: number;
    readonly clazz: ClassConstructor<T>;
    constructor(parameters: GetCompareExchangeValuesParameters<T>);
    getCommand(store: IDocumentStore, conventions: DocumentConventions, cache: HttpCache): RavenCommand<{
        [key: string]: CompareExchangeValue<T>;
    }>;
    readonly resultType: OperationResultType;
}
export declare class GetCompareExchangeValuesCommand<T> extends RavenCommand<{
    [key: string]: CompareExchangeValue<T>;
}> {
    private _operation;
    private _conventions;
    constructor(operation: GetCompareExchangeValuesOperation<T>, conventions: DocumentConventions);
    readonly isReadRequest: boolean;
    createRequest(node: ServerNode): HttpRequestBase;
    setResponse(response: string, fromCache: boolean): void;
}
