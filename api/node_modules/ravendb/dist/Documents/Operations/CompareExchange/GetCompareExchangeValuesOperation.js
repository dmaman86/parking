"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const StringBuilder = require("string-builder");
const Exceptions_1 = require("../../../Exceptions");
const RavenCommand_1 = require("../../../Http/RavenCommand");
const CompareExchangeValueResultParser_1 = require("./CompareExchangeValueResultParser");
class GetCompareExchangeValuesOperation {
    constructor(parameters) {
        this._clazz = parameters.clazz;
        if (parameters.keys) {
            if (!parameters.keys.length) {
                Exceptions_1.throwError("InvalidArgumentException", "Keys cannot be an empty array.");
            }
            this._keys = parameters.keys;
        }
        else if (parameters.startWith) {
            this._startWith = parameters.startWith;
            this._start = parameters.start;
            this._pageSize = parameters.pageSize;
        }
        else {
            Exceptions_1.throwError("InvalidArgumentException", "Please specify at least keys or startWith parameter");
        }
    }
    get keys() {
        return this._keys;
    }
    get startWith() {
        return this._startWith;
    }
    get start() {
        return this._start;
    }
    get pageSize() {
        return this._pageSize;
    }
    get clazz() {
        return this._clazz;
    }
    getCommand(store, conventions, cache) {
        return new GetCompareExchangeValuesCommand(this, conventions);
    }
    get resultType() {
        return "CommandResult";
    }
}
exports.GetCompareExchangeValuesOperation = GetCompareExchangeValuesOperation;
class GetCompareExchangeValuesCommand extends RavenCommand_1.RavenCommand {
    constructor(operation, conventions) {
        super();
        this._operation = operation;
        this._conventions = conventions;
    }
    get isReadRequest() {
        return true;
    }
    createRequest(node) {
        const pathBuilder = new StringBuilder(node.url);
        pathBuilder.append("/databases/")
            .append(node.database)
            .append("/cmpxchg?");
        if (this._operation.keys) {
            for (const key of this._operation.keys) {
                pathBuilder.append("&key=").append(encodeURIComponent(key));
            }
        }
        else {
            if (this._operation.startWith) {
                pathBuilder.append("&startsWith=")
                    .append(encodeURIComponent(this._operation.startWith));
            }
            if (this._operation.start) {
                pathBuilder.append("&start=")
                    .append(this._operation.start);
            }
            if (this._operation.pageSize) {
                pathBuilder.append("&pageSize=")
                    .append(this._operation.pageSize);
            }
        }
        const uri = pathBuilder.toString();
        return { uri };
    }
    setResponse(response, fromCache) {
        this.result = CompareExchangeValueResultParser_1.CompareExchangeValueResultParser.getValues(response, this._conventions, this._operation.clazz);
    }
}
exports.GetCompareExchangeValuesCommand = GetCompareExchangeValuesCommand;
