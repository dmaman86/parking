import { HttpRequestBase } from "../../../Primitives/Http";
import { IOperation, OperationResultType } from "../OperationAbstractions";
import { CompareExchangeResult } from "./CompareExchangeResult";
import { RavenCommand } from "../../../Http/RavenCommand";
import { IDocumentStore } from "../../IDocumentStore";
import { DocumentConventions } from "../../Conventions/DocumentConventions";
import { HttpCache } from "../../../Http/HttpCache";
import { ServerNode } from "../../../Http/ServerNode";
export declare class PutCompareExchangeValueOperation<T> implements IOperation<CompareExchangeResult<T>> {
    private _key;
    private _value;
    private _index;
    constructor(key: string, value: T, index: number);
    getCommand(store: IDocumentStore, conventions: DocumentConventions, cache: HttpCache): RavenCommand<CompareExchangeResult<T>>;
    readonly resultType: OperationResultType;
}
export declare class PutCompareExchangeValueCommand<T> extends RavenCommand<CompareExchangeResult<T>> {
    private _key;
    private _value;
    private _index;
    private _conventions;
    constructor(key: string, value: T, index: number, conventions: DocumentConventions);
    readonly isReadRequest: boolean;
    createRequest(node: ServerNode): HttpRequestBase;
    setResponse(response: string, fromCache: boolean): void;
}
