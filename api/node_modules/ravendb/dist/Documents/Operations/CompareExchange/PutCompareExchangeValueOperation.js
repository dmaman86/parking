"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CompareExchangeResult_1 = require("./CompareExchangeResult");
const RavenCommand_1 = require("../../../Http/RavenCommand");
const DocumentConventions_1 = require("../../Conventions/DocumentConventions");
const Exceptions_1 = require("../../../Exceptions");
const Serializer_1 = require("../../../Mapping/Json/Serializer");
const TypeUtil_1 = require("../../../Utility/TypeUtil");
class PutCompareExchangeValueOperation {
    constructor(key, value, index) {
        this._key = key;
        this._value = value;
        this._index = index;
    }
    getCommand(store, conventions, cache) {
        return new PutCompareExchangeValueCommand(this._key, this._value, this._index, conventions);
    }
    get resultType() {
        return "CommandResult";
    }
}
exports.PutCompareExchangeValueOperation = PutCompareExchangeValueOperation;
class PutCompareExchangeValueCommand extends RavenCommand_1.RavenCommand {
    constructor(key, value, index, conventions) {
        super();
        if (!key) {
            Exceptions_1.throwError("InvalidArgumentException", "The key argument must have value");
        }
        if (index < 0) {
            Exceptions_1.throwError("InvalidArgumentException", "Index must be a non-negative number");
        }
        this._key = key;
        this._value = value;
        this._index = index;
        this._conventions = conventions || DocumentConventions_1.DocumentConventions.defaultConventions;
    }
    get isReadRequest() {
        return false;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database + "/cmpxchg?key=" + this._key + "&index=" + this._index;
        const tuple = {};
        tuple["Object"] = this._value;
        const json = tuple;
        return {
            method: "PUT",
            uri,
            body: Serializer_1.JsonSerializer.getDefault().serialize(tuple),
            headers: this._getHeaders().withContentTypeJson().build()
        };
    }
    setResponse(response, fromCache) {
        if (TypeUtil_1.TypeUtil.isPrimitive(this._value)) {
            this.result = CompareExchangeResult_1.CompareExchangeResult.parseFromString(response, this._conventions, null);
        }
        else {
            const type = this._conventions.getEntityTypeDescriptor(this._value);
            this.result = CompareExchangeResult_1.CompareExchangeResult.parseFromString(response, this._conventions, (TypeUtil_1.TypeUtil.isClass(type) ? type : null));
        }
    }
}
exports.PutCompareExchangeValueCommand = PutCompareExchangeValueCommand;
