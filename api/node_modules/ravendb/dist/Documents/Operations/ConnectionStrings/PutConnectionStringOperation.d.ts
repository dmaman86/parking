import { HttpRequestBase } from "../../../Primitives/Http";
import { ConnectionString } from "../../../ServerWide/ConnectionString";
import { IMaintenanceOperation, OperationResultType } from "../OperationAbstractions";
import { DocumentConventions } from "../../Conventions/DocumentConventions";
import { RavenCommand } from "../../../Http/RavenCommand";
import { ServerNode } from "../../../Http/ServerNode";
export interface PutConnectionStringResult {
    eTag: number;
}
export declare class PutConnectionStringOperation<T extends ConnectionString> implements IMaintenanceOperation<PutConnectionStringResult> {
    private _connectionString;
    constructor(connectionString: T);
    getCommand(conventions: DocumentConventions): RavenCommand<PutConnectionStringResult>;
    readonly resultType: OperationResultType;
}
export declare class PutConnectionStringCommand<T extends ConnectionString> extends RavenCommand<PutConnectionStringResult> {
    private _connectionString;
    constructor(connectionString: T);
    readonly isReadRequest: boolean;
    createRequest(node: ServerNode): HttpRequestBase;
    setResponse(response: string, fromCache: boolean): void;
}
