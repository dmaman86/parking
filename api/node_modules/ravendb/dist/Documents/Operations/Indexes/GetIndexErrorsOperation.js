"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RavenCommand_1 = require("../../../Http/RavenCommand");
class GetIndexErrorsOperation {
    constructor(indexNames = null) {
        this._indexNames = indexNames;
    }
    getCommand(conventions) {
        return new GetIndexErrorsCommand(this._indexNames);
    }
    get resultType() {
        return "CommandResult";
    }
}
exports.GetIndexErrorsOperation = GetIndexErrorsOperation;
class GetIndexErrorsCommand extends RavenCommand_1.RavenCommand {
    constructor(indexNames) {
        super();
        this._indexNames = indexNames;
    }
    createRequest(node) {
        let uri = node.url + "/databases/" + node.database + "/indexes/errors";
        if (this._indexNames && this._indexNames.length) {
            uri += "?";
            for (const indexName of this._indexNames) {
                uri += "&name=" + indexName;
            }
        }
        return { uri };
    }
    setResponse(response, fromCache) {
        if (!response) {
            this._throwInvalidResponse();
            return;
        }
        const typeInfo = {
            nestedTypes: {
                "results[].errors[].timestamp": "date"
            }
        };
        this.result = this._parseResponseDefault(response, typeInfo)["results"];
    }
    get isReadRequest() {
        return true;
    }
}
exports.GetIndexErrorsCommand = GetIndexErrorsCommand;
