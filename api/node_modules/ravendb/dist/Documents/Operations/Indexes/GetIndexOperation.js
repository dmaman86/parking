"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const IndexDefinition_1 = require("../../Indexes/IndexDefinition");
const Exceptions_1 = require("../../../Exceptions");
const RavenCommand_1 = require("../../../Http/RavenCommand");
class GetIndexOperation {
    constructor(indexName) {
        if (!indexName) {
            Exceptions_1.throwError("InvalidArgumentException", "IndexName cannot be null.");
        }
        this._indexName = indexName;
    }
    getCommand(conventions) {
        return new GetIndexCommand(this._indexName);
    }
    get resultType() {
        return "CommandResult";
    }
}
exports.GetIndexOperation = GetIndexOperation;
class GetIndexCommand extends RavenCommand_1.RavenCommand {
    constructor(indexName) {
        super();
        if (!indexName) {
            Exceptions_1.throwError("InvalidArgumentException", "IndexName cannot be null.");
        }
        this._indexName = indexName;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database + "/indexes?name="
            + encodeURIComponent(this._indexName);
        return { uri };
    }
    setResponse(response, fromCache) {
        if (!response) {
            return;
        }
        const parsed = this._serializer.deserialize(response);
        const indexDefTypeInfo = {
            nestedTypes: {
                "results[]": "IndexDefinition",
                "results[].maps": "Set"
            },
        };
        const result = this._typedObjectMapper.fromObjectLiteral(parsed, indexDefTypeInfo, new Map([[IndexDefinition_1.IndexDefinition.name, IndexDefinition_1.IndexDefinition]]));
        this.result = result["results"][0] || null;
    }
    get isReadRequest() {
        return true;
    }
}
exports.GetIndexCommand = GetIndexCommand;
