"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RavenCommand_1 = require("../../../Http/RavenCommand");
const IndexDefinition_1 = require("../../Indexes/IndexDefinition");
class GetIndexesOperation {
    constructor(start, pageSize) {
        this._start = start;
        this._pageSize = pageSize;
    }
    getCommand(conventions) {
        return new GetIndexesCommand(this._start, this._pageSize);
    }
    get resultType() {
        return "CommandResult";
    }
}
exports.GetIndexesOperation = GetIndexesOperation;
class GetIndexesCommand extends RavenCommand_1.RavenCommand {
    constructor(start, pageSize) {
        super();
        this._start = start;
        this._pageSize = pageSize;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database
            + "/indexes?start=" + this._start + "&pageSize=" + this._pageSize;
        return { uri };
    }
    setResponse(response, fromCache) {
        if (!response) {
            this._throwInvalidResponse();
        }
        const parsed = this._serializer.deserialize(response);
        const indexDefTypeInfo = {
            nestedTypes: {
                "results[]": "IndexDefinition",
                "results[].maps": "Set"
            },
        };
        const result = this._typedObjectMapper.fromObjectLiteral(parsed, indexDefTypeInfo, new Map([[IndexDefinition_1.IndexDefinition.name, IndexDefinition_1.IndexDefinition]]));
        this.result = result["results"];
    }
    get isReadRequest() {
        return true;
    }
}
exports.GetIndexesCommand = GetIndexesCommand;
