import { IMaintenanceOperation, OperationResultType } from "../OperationAbstractions";
import { RavenCommand } from "../../../Http/RavenCommand";
import { DocumentConventions } from "../../Conventions/DocumentConventions";
import { ServerNode } from "../../..";
import { HttpRequestBase } from "../../../Primitives/Http";
export declare class GetTermsOperation implements IMaintenanceOperation<string[]> {
    private _indexName;
    private _field;
    private _fromValue;
    private _pageSize;
    constructor(indexName: string, field: string, fromValue: string);
    constructor(indexName: string, field: string, fromValue: string, pageSize: number);
    getCommand(conventions: DocumentConventions): RavenCommand<string[]>;
    readonly resultType: OperationResultType;
}
export declare class GetTermsCommand extends RavenCommand<string[]> {
    private _indexName;
    private _field;
    private _fromValue;
    private _pageSize;
    constructor(indexName: string, field: string, fromValue: string);
    constructor(indexName: string, field: string, fromValue: string, pageSize: number);
    createRequest(node: ServerNode): HttpRequestBase;
    setResponse(response: string, fromCache: boolean): void;
    readonly isReadRequest: boolean;
}
export interface TermsQueryResult {
    terms: string[];
    resultEtag: number;
    indexName: string;
}
