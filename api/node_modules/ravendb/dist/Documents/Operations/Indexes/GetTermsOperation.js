"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Exceptions_1 = require("../../../Exceptions");
const RavenCommand_1 = require("../../../Http/RavenCommand");
class GetTermsOperation {
    constructor(indexName, field, fromValue, pageSize = null) {
        if (!indexName) {
            Exceptions_1.throwError("InvalidArgumentException", "IndexName cannot be null");
        }
        if (!field) {
            Exceptions_1.throwError("InvalidArgumentException", "Field cannot be null");
        }
        this._indexName = indexName;
        this._field = field;
        this._fromValue = fromValue;
        this._pageSize = pageSize;
    }
    getCommand(conventions) {
        return new GetTermsCommand(this._indexName, this._field, this._fromValue, this._pageSize);
    }
    get resultType() {
        return "CommandResult";
    }
}
exports.GetTermsOperation = GetTermsOperation;
class GetTermsCommand extends RavenCommand_1.RavenCommand {
    constructor(indexName, field, fromValue, pageSize = null) {
        super();
        if (!indexName) {
            Exceptions_1.throwError("InvalidArgumentException", "IndexName cannot be null");
        }
        if (!field) {
            Exceptions_1.throwError("InvalidArgumentException", "Field cannot be null");
        }
        this._indexName = indexName;
        this._field = field;
        this._fromValue = fromValue;
        this._pageSize = pageSize;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database + "/indexes/terms?name=" +
            encodeURIComponent(this._indexName) + "&field=" + encodeURIComponent(this._field) +
            "&fromValue=" + (this._fromValue || "") + "&pageSize=" + (this._pageSize || "");
        return { uri };
    }
    setResponse(response, fromCache) {
        if (!response) {
            this._throwInvalidResponse();
        }
        const termResult = this._parseResponseDefault(response);
        this.result = termResult["terms"];
    }
    get isReadRequest() {
        return true;
    }
}
exports.GetTermsCommand = GetTermsCommand;
