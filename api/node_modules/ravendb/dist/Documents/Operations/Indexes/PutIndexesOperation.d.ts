import { JsonSerializer } from "../../../Mapping/Json/Serializer";
import { IMaintenanceOperation } from "../OperationAbstractions";
import { IndexDefinition } from "../../Indexes/IndexDefinition";
import { DocumentConventions } from "../../Conventions/DocumentConventions";
import { RavenCommand } from "../../../Http/RavenCommand";
import { ServerNode, OperationResultType } from "../../..";
import { HttpRequestBase } from "../../../Primitives/Http";
export interface PutIndexResult {
    indexName: string;
}
export declare class PutIndexesOperation implements IMaintenanceOperation<PutIndexResult[]> {
    readonly resultType: OperationResultType;
    private _indexToAdd;
    constructor(...indexToAdd: IndexDefinition[]);
    getCommand(conventions: DocumentConventions): RavenCommand<PutIndexResult[]>;
}
export declare class PutIndexesCommand extends RavenCommand<PutIndexResult[]> {
    private _indexToAdd;
    constructor(conventions: DocumentConventions, indexesToAdd: IndexDefinition[]);
    protected readonly _serializer: JsonSerializer;
    createRequest(node: ServerNode): HttpRequestBase;
    setResponse(response: string, fromCache: boolean): void;
    readonly isReadRequest: boolean;
}
