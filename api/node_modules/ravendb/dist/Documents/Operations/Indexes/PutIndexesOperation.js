"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Exceptions_1 = require("../../../Exceptions");
const RavenCommand_1 = require("../../../Http/RavenCommand");
const Mapping_1 = require("../../../Mapping");
const HttpUtil_1 = require("../../../Utility/HttpUtil");
class PutIndexesOperation {
    get resultType() {
        return "CommandResult";
    }
    constructor(...indexToAdd) {
        if (!indexToAdd || !indexToAdd.length) {
            Exceptions_1.throwError("InvalidArgumentException", "indexToAdd cannot be null");
        }
        this._indexToAdd = indexToAdd;
    }
    getCommand(conventions) {
        return new PutIndexesCommand(conventions, this._indexToAdd);
    }
}
exports.PutIndexesOperation = PutIndexesOperation;
class PutIndexesCommand extends RavenCommand_1.RavenCommand {
    constructor(conventions, indexesToAdd) {
        super();
        if (!conventions) {
            Exceptions_1.throwError("InvalidArgumentException", "conventions cannot be null or undefined.");
        }
        if (!indexesToAdd) {
            Exceptions_1.throwError("InvalidArgumentException", "indexesToAdd cannot be null or undefined.");
        }
        this._indexToAdd = indexesToAdd.reduce((result, next) => {
            if (!next.name) {
                Exceptions_1.throwError("InvalidArgumentException", "Index name cannot be null.");
            }
            result.push(Mapping_1.Mapping.getDefaultMapper().toObjectLiteral(next));
            return result;
        }, []);
    }
    get _serializer() {
        const INDEX_DEF_FIELDS_REGEX = /^Indexes\.(\d+)\.Fields$/;
        const serializer = super._serializer;
        serializer.replacerRules[0].contextMatcher = (context) => {
            const m = context.currentPath.match(INDEX_DEF_FIELDS_REGEX);
            return !m;
        };
        return serializer;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database + "/admin/indexes";
        const body = this._serializer
            .serialize({ Indexes: this._indexToAdd });
        const headers = HttpUtil_1.HeadersBuilder
            .create()
            .withContentTypeJson()
            .build();
        return {
            method: "PUT",
            uri,
            body,
            headers
        };
    }
    setResponse(response, fromCache) {
        this.result = this._serializer.deserialize(response)["results"];
    }
    get isReadRequest() {
        return false;
    }
}
exports.PutIndexesCommand = PutIndexesCommand;
