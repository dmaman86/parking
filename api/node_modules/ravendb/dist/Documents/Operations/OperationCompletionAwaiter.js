"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BluebirdPromise = require("bluebird");
const GetOperationStateOperation_1 = require("./GetOperationStateOperation");
const Exceptions_1 = require("../../Exceptions");
const Exceptions_2 = require("../../Exceptions");
class OperationCompletionAwaiter {
    get id() {
        return this._id;
    }
    constructor(requestExecutor, conventions, id) {
        this._requestExecutor = requestExecutor;
        this._conventions = conventions;
        this._id = id;
    }
    _fetchOperationStatus() {
        const command = this._getOperationStateCommand(this._conventions, this._id);
        return Promise.resolve()
            .then(() => this._requestExecutor.execute(command))
            .then(() => command.result);
    }
    _getOperationStateCommand(conventions, id) {
        return new GetOperationStateOperation_1.GetOperationStateCommand(this._conventions, this._id);
    }
    waitForCompletion() {
        const operationStatusPolling = () => {
            return BluebirdPromise.resolve()
                .then(() => this._fetchOperationStatus())
                .then((operationStatusResult) => {
                const operationStatus = operationStatusResult.status;
                switch (operationStatus) {
                    case "Completed":
                        return;
                    case "Cancelled":
                        Exceptions_1.throwError("OperationCancelledException", `Operation of ID ${this._id} has been cancelled.`);
                    case "Faulted":
                        const faultResult = operationStatusResult.result;
                        const err = Exceptions_2.ExceptionDispatcher.get(faultResult, faultResult.statusCode);
                        throw err;
                }
                return BluebirdPromise.delay(500)
                    .then(() => operationStatusPolling());
            });
        };
        return Promise.resolve(operationStatusPolling());
    }
}
exports.OperationCompletionAwaiter = OperationCompletionAwaiter;
