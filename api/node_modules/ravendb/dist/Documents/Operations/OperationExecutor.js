"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const OperationCompletionAwaiter_1 = require("./OperationCompletionAwaiter");
const BluebirdPromise = require("bluebird");
const Exceptions_1 = require("../../Exceptions");
const PatchOperation_1 = require("./PatchOperation");
const __1 = require("../..");
class OperationExecutor {
    constructor(store, databaseName) {
        this._store = store;
        this._databaseName = databaseName ? databaseName : store.database;
        this._requestExecutor = store.getRequestExecutor(databaseName);
    }
    forDatabase(databaseName) {
        if (!databaseName) {
            Exceptions_1.throwError("InvalidArgumentException", `Argument 'databaseName' is invalid: ${databaseName}.`);
        }
        if (this._databaseName.toLowerCase() === databaseName.toLowerCase()) {
            return this;
        }
        return new OperationExecutor(this._store, databaseName);
    }
    send(operation, sessionInfo, documentType) {
        const command = operation.getCommand(this._store, this._requestExecutor.conventions, this._requestExecutor.cache);
        const result = BluebirdPromise.resolve()
            .then(() => this._requestExecutor.execute(command, sessionInfo))
            .then(() => {
            if (operation.resultType === "OperationId") {
                const idResult = command.result;
                const awaiter = new OperationCompletionAwaiter_1.OperationCompletionAwaiter(this._requestExecutor, this._requestExecutor.conventions, idResult.operationId);
                return awaiter;
            }
            else if (operation.resultType === "PatchResult") {
                const patchOperationResult = new PatchOperation_1.PatchOperationResult();
                if (command.statusCode === __1.StatusCodes.NotModified) {
                    patchOperationResult.status = "NotModified";
                    return patchOperationResult;
                }
                if (command.statusCode === __1.StatusCodes.NotFound) {
                    patchOperationResult.status = "DocumentDoesNotExist";
                    return patchOperationResult;
                }
                const patchResult = command.result;
                patchOperationResult.status = patchResult.status;
                const { conventions } = this._requestExecutor;
                conventions.tryRegisterEntityType(documentType);
                const entityType = conventions.findEntityType(documentType);
                patchOperationResult.document = conventions.deserializeEntityFromJson(entityType, patchResult.modifiedDocument);
                return patchOperationResult;
            }
            return command.result;
        });
        return Promise.resolve(result);
    }
}
exports.OperationExecutor = OperationExecutor;
