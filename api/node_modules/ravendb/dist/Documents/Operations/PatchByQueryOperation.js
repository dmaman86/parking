"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const IndexQuery_1 = require("../Queries/IndexQuery");
const TypeUtil_1 = require("../../Utility/TypeUtil");
const Exceptions_1 = require("../../Exceptions");
const RavenCommand_1 = require("../../Http/RavenCommand");
class PatchByQueryOperation {
    constructor(queryToUpdate, options) {
        if (TypeUtil_1.TypeUtil.isString(queryToUpdate)) {
            queryToUpdate = new IndexQuery_1.IndexQuery(queryToUpdate);
        }
        if (!queryToUpdate) {
            Exceptions_1.throwError("InvalidArgumentException", "QueryToUpdate cannot be null");
        }
        this._queryToUpdate = queryToUpdate;
        this._options = options;
    }
    getCommand(store, conventions, cache) {
        return new PatchByIndexCommand(conventions, this._queryToUpdate, this._options);
    }
    get resultType() {
        return "OperationId";
    }
}
PatchByQueryOperation.DUMMY_QUERY = new IndexQuery_1.IndexQuery();
exports.PatchByQueryOperation = PatchByQueryOperation;
class PatchByIndexCommand extends RavenCommand_1.RavenCommand {
    get isReadRequest() {
        return false;
    }
    constructor(conventions, queryToUpdate, options) {
        super();
        this._conventions = conventions;
        this._queryToUpdate = queryToUpdate;
        this._options = options || {};
    }
    createRequest(node) {
        let path = node.url + "/databases/" + node.database + "/queries?allowStale="
            + !!this._options.allowStale;
        if (!TypeUtil_1.TypeUtil.isNullOrUndefined(this._options.maxOpsPerSecond)) {
            path += "&maxOpsPerSec=" + this._options.maxOpsPerSecond;
        }
        path += "&details=" + !!this._options.retrieveDetails;
        if (!TypeUtil_1.TypeUtil.isNullOrUndefined(this._options.staleTimeout)) {
            path += "&staleTimeout=" + this._options.staleTimeout;
        }
        const body = `{ "Query": ${IndexQuery_1.writeIndexQuery(this._conventions, this._queryToUpdate)} }`;
        return {
            method: "PATCH",
            uri: path,
            headers: this._getHeaders().withContentTypeJson().build(),
            body
        };
    }
    setResponse(response, fromCache) {
        if (!response) {
            this._throwInvalidResponse();
        }
        this.result = this._serializer.deserialize(response);
    }
}
exports.PatchByIndexCommand = PatchByIndexCommand;
