import { HttpRequestBase } from "../../Primitives/Http";
import { PatchRequest } from "./PatchRequest";
import { IOperation, OperationResultType } from "./OperationAbstractions";
import { PatchStatus } from "./PatchStatus";
import { RavenCommand } from "../../Http/RavenCommand";
import { IDocumentStore } from "../IDocumentStore";
import { DocumentConventions } from "../Conventions/DocumentConventions";
import { HttpCache } from "../../Http/HttpCache";
import { ServerNode } from "../../Http/ServerNode";
import { PatchResult } from "./PatchResult";
export interface Payload {
    patch: PatchRequest;
    patchIfMissing: PatchRequest;
}
export declare class PatchOperationResult<TEntity> {
    status: PatchStatus;
    document: TEntity;
}
export declare class PatchOperation implements IOperation<PatchResult> {
    private _id;
    private _changeVector;
    private _patch;
    private _patchIfMissing;
    private _skipPatchIfChangeVectorMismatch;
    readonly resultType: OperationResultType;
    constructor(id: string, changeVector: string, patch: PatchRequest);
    constructor(id: string, changeVector: string, patch: PatchRequest, patchIfMissing: PatchRequest, skipPatchIfChangeVectorMismatch: boolean);
    getCommand(store: IDocumentStore, conventions: DocumentConventions, cache: HttpCache): RavenCommand<PatchResult>;
}
export declare class PatchCommand extends RavenCommand<PatchResult> {
    private _id;
    private _changeVector;
    private _patch;
    private _skipPatchIfChangeVectorMismatch;
    private _returnDebugInformation;
    private _test;
    constructor(conventions: DocumentConventions, id: string, changeVector: string, patch: PatchRequest, patchIfMissing: PatchRequest, skipPatchIfChangeVectorMismatch: boolean, returnDebugInformation: boolean, test: boolean);
    readonly isReadRequest: boolean;
    createRequest(node: ServerNode): HttpRequestBase;
    setResponse(response: string, fromCache: boolean): void;
}
