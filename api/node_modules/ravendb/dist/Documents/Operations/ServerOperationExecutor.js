"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ClusterRequestExecutor_1 = require("../../Http/ClusterRequestExecutor");
const ServerWideOperationCompletionAwaiter_1 = require("../../ServerWide/Operations/ServerWideOperationCompletionAwaiter");
const LogUtil_1 = require("../../Utility/LogUtil");
const log = LogUtil_1.getLogger({ module: "ServerOperationExecutor" });
class ServerOperationExecutor {
    constructor(store) {
        this._store = store;
        this._requestExecutor = store.conventions.disableTopologyUpdates ?
            ClusterRequestExecutor_1.ClusterRequestExecutor.createForSingleNode(store.urls[0], { authOptions: store.authOptions }) :
            ClusterRequestExecutor_1.ClusterRequestExecutor.create(store.urls, store);
        store.once("afterDispose", (callback) => {
            log.info("Dispose request executor.");
            this._requestExecutor.dispose();
            callback();
        });
    }
    send(operation) {
        const command = operation.getCommand(this._requestExecutor.conventions);
        const result = Promise.resolve()
            .then(() => this._requestExecutor.execute(command))
            .then(() => {
            if (operation.resultType === "OperationId") {
                const idResult = command.result;
                const awaiter = new ServerWideOperationCompletionAwaiter_1.ServerWideOperationCompletionAwaiter(this._requestExecutor, this._requestExecutor.conventions, idResult.operationId);
                return awaiter;
            }
            return command.result;
        });
        return result;
    }
    dispose() {
        this._requestExecutor.dispose();
    }
}
exports.ServerOperationExecutor = ServerOperationExecutor;
