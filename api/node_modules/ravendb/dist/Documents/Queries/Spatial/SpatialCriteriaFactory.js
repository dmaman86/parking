"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Constants_1 = require("../../../Constants");
const WktCriteria_1 = require("./WktCriteria");
const CircleCriteria_1 = require("./CircleCriteria");
class SpatialCriteriaFactory {
    constructor() { }
    relatesToShape(shapeWkt, relation, distErrorPercent) {
        if (!distErrorPercent) {
            distErrorPercent = Constants_1.CONSTANTS.Documents.Indexing.Spatial.DEFAULT_DISTANCE_ERROR_PCT;
        }
        return new WktCriteria_1.WktCriteria(shapeWkt, relation, distErrorPercent);
    }
    intersects(shapeWkt, distErrorPercent) {
        if (!distErrorPercent) {
            distErrorPercent = Constants_1.CONSTANTS.Documents.Indexing.Spatial.DEFAULT_DISTANCE_ERROR_PCT;
        }
        return this.relatesToShape(shapeWkt, "Intersects", distErrorPercent);
    }
    contains(shapeWkt, distErrorPercent) {
        distErrorPercent = distErrorPercent || Constants_1.CONSTANTS.Documents.Indexing.Spatial.DEFAULT_DISTANCE_ERROR_PCT;
        return this.relatesToShape(shapeWkt, "Contains", distErrorPercent);
    }
    disjoint(shapeWkt, distErrorPercent) {
        distErrorPercent = distErrorPercent || Constants_1.CONSTANTS.Documents.Indexing.Spatial.DEFAULT_DISTANCE_ERROR_PCT;
        return this.relatesToShape(shapeWkt, "Disjoint", distErrorPercent);
    }
    within(shapeWkt, distErrorPercent) {
        distErrorPercent = distErrorPercent || Constants_1.CONSTANTS.Documents.Indexing.Spatial.DEFAULT_DISTANCE_ERROR_PCT;
        return this.relatesToShape(shapeWkt, "Within", distErrorPercent);
    }
    withinRadius(radius, latitude, longitude, radiusUnits = null, distErrorPercent) {
        distErrorPercent = distErrorPercent || Constants_1.CONSTANTS.Documents.Indexing.Spatial.DEFAULT_DISTANCE_ERROR_PCT;
        return new CircleCriteria_1.CircleCriteria(radius, latitude, longitude, radiusUnits, "Within", distErrorPercent);
    }
}
SpatialCriteriaFactory.INSTANCE = new SpatialCriteriaFactory();
exports.SpatialCriteriaFactory = SpatialCriteriaFactory;
