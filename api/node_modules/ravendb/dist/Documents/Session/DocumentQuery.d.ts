import { AbstractDocumentQuery } from "./AbstractDocumentQuery";
import { IDocumentQuery } from "./IDocumentQuery";
import { DocumentType } from "../DocumentAbstractions";
import { InMemoryDocumentSessionOperations } from "./InMemoryDocumentSessionOperations";
import { DeclareToken } from "./Tokens/DeclareToken";
import { LoadToken } from "./Tokens/LoadToken";
import { QueryData } from "../Queries/QueryData";
import { OrderingType } from "./OrderingType";
import { SearchOperator } from "../Queries/SearchOperator";
import { QueryStatistics } from "./QueryStatistics";
import { QueryOperator } from "../Queries/QueryOperator";
import { MethodCall } from "./MethodCall";
import { WhereParams } from "./WhereParams";
import { IGroupByDocumentQuery } from "./IGroupByDocumentQuery";
import { GroupBy } from "../Queries/GroupBy";
import { SpatialCriteriaFactory } from "../Queries/Spatial/SpatialCriteriaFactory";
import { SpatialCriteria } from "../Queries/Spatial/SpatialCriteria";
import { DynamicSpatialField } from "../Queries/Spatial/DynamicSpatialField";
import { SpatialUnits, SpatialRelation } from "../Indexes/Spatial";
export declare class DocumentQuery<T extends object> extends AbstractDocumentQuery<T, DocumentQuery<T>> implements IDocumentQuery<T> {
    constructor(documentType: DocumentType<T>, session: InMemoryDocumentSessionOperations, indexName: string, collectionName: string, isGroupBy: boolean);
    constructor(documentType: DocumentType<T>, session: InMemoryDocumentSessionOperations, indexName: string, collectionName: string, isGroupBy: boolean, declareToken: DeclareToken, loadTokens: LoadToken[], fromAlias: string);
    selectFields<TProjection extends Object>(property: string): IDocumentQuery<TProjection>;
    selectFields<TProjection extends object>(properties: string[]): IDocumentQuery<TProjection>;
    selectFields<TProjection extends object>(queryData: QueryData, projectionType: DocumentType<TProjection>): IDocumentQuery<TProjection>;
    selectFields<TProjection extends object>(property: string, projectionType: DocumentType<TProjection>): IDocumentQuery<TProjection>;
    selectFields<TProjection extends object>(properties: string[], projectionType: DocumentType<TProjection>): IDocumentQuery<TProjection>;
    private _selectFieldsByProjectionType<TProjection>(properties, projectionType);
    distinct(): IDocumentQuery<T>;
    orderByScore(): IDocumentQuery<T>;
    orderByScoreDescending(): IDocumentQuery<T>;
    waitForNonStaleResults(): IDocumentQuery<T>;
    waitForNonStaleResults(waitTimeout: number): IDocumentQuery<T>;
    addParameter(name: string, value: any): IDocumentQuery<T>;
    addOrder(fieldName: string, descending: boolean): IDocumentQuery<T>;
    addOrder(fieldName: string, descending: boolean, ordering: OrderingType): IDocumentQuery<T>;
    openSubclause(): IDocumentQuery<T>;
    closeSubclause(): IDocumentQuery<T>;
    search(fieldName: string, searchTerms: string): IDocumentQuery<T>;
    search(fieldName: string, searchTerms: string, operator: SearchOperator): IDocumentQuery<T>;
    intersect(): IDocumentQuery<T>;
    containsAny(fieldName: string, values: any[]): IDocumentQuery<T>;
    containsAll(fieldName: string, values: any): IDocumentQuery<T>;
    statistics(stats: (stats: QueryStatistics) => void): IDocumentQuery<T>;
    usingDefaultOperator(queryOperator: QueryOperator): IDocumentQuery<T>;
    noTracking(): IDocumentQuery<T>;
    noCaching(): IDocumentQuery<T>;
    include(path: string): IDocumentQuery<T>;
    not(): IDocumentQuery<T>;
    take(count: number): IDocumentQuery<T>;
    skip(count: number): IDocumentQuery<T>;
    whereLucene(fieldName: string, whereClause: string): IDocumentQuery<T>;
    whereEquals(fieldName: string, method: MethodCall): IDocumentQuery<T>;
    whereEquals(fieldName: string, method: MethodCall, exact: boolean): IDocumentQuery<T>;
    whereEquals(fieldName: string, value: any): void;
    whereEquals(fieldName: string, value: any, exact: boolean): IDocumentQuery<T>;
    whereEquals(whereParams: WhereParams): IDocumentQuery<T>;
    whereNotEquals(fieldName: string, method: MethodCall): IDocumentQuery<T>;
    whereNotEquals(fieldName: string, method: MethodCall, exact: boolean): IDocumentQuery<T>;
    whereNotEquals(fieldName: string, value: any): void;
    whereNotEquals(fieldName: string, value: any, exact: boolean): IDocumentQuery<T>;
    whereNotEquals(whereParams: WhereParams): IDocumentQuery<T>;
    whereIn(fieldName: string, values: any[]): IDocumentQuery<T>;
    whereIn(fieldName: string, values: any[], exact: boolean): IDocumentQuery<T>;
    whereStartsWith(fieldName: string, value: any): IDocumentQuery<T>;
    whereEndsWith(fieldName: string, value: any): IDocumentQuery<T>;
    whereBetween(fieldName: string, start: any, end: any): IDocumentQuery<T>;
    whereBetween(fieldName: string, start: any, end: any, exact: boolean): IDocumentQuery<T>;
    whereGreaterThan(fieldName: string, value: any): IDocumentQuery<T>;
    whereGreaterThan(fieldName: string, value: any, exact: boolean): IDocumentQuery<T>;
    whereGreaterThanOrEqual(fieldName: string, value: any): IDocumentQuery<T>;
    whereGreaterThanOrEqual(fieldName: string, value: any, exact: boolean): IDocumentQuery<T>;
    whereLessThan(fieldName: string, value: any): IDocumentQuery<T>;
    whereLessThan(fieldName: string, value: any, exact: boolean): IDocumentQuery<T>;
    whereLessThanOrEqual(fieldName: string, value: any): IDocumentQuery<T>;
    whereLessThanOrEqual(fieldName: string, value: any, exact: boolean): IDocumentQuery<T>;
    whereExists(fieldName: string): IDocumentQuery<T>;
    whereRegex(fieldName: string, pattern: string): IDocumentQuery<T>;
    andAlso(): IDocumentQuery<T>;
    orElse(): IDocumentQuery<T>;
    boost(boost: number): IDocumentQuery<T>;
    fuzzy(fuzzy: number): IDocumentQuery<T>;
    proximity(proximity: number): IDocumentQuery<T>;
    randomOrdering(): IDocumentQuery<T>;
    randomOrdering(seed: string): IDocumentQuery<T>;
    groupBy(fieldName: string, ...fieldNames: string[]): IGroupByDocumentQuery<T>;
    groupBy(field: GroupBy, ...fields: GroupBy[]): IGroupByDocumentQuery<T>;
    ofType<TResult extends object>(tResultClass: DocumentType<TResult>): IDocumentQuery<TResult>;
    orderBy(field: string): IDocumentQuery<T>;
    orderBy(field: string, ordering: OrderingType): IDocumentQuery<T>;
    orderByDescending(field: string): IDocumentQuery<T>;
    orderByDescending(field: string, ordering: OrderingType): IDocumentQuery<T>;
    private _createDocumentQueryInternal<TResult>(resultClass);
    private _createDocumentQueryInternal<TResult>(resultClass, queryData);
    spatial(fieldName: string, clause: (factory: SpatialCriteriaFactory) => SpatialCriteria): IDocumentQuery<T>;
    spatial(field: DynamicSpatialField, clause: (factory: SpatialCriteriaFactory) => SpatialCriteria): IDocumentQuery<T>;
    withinRadiusOf(fieldName: string, radius: number, latitude: number, longitude: number): IDocumentQuery<T>;
    withinRadiusOf(fieldName: string, radius: number, latitude: number, longitude: number, radiusUnits: SpatialUnits): IDocumentQuery<T>;
    withinRadiusOf(fieldName: string, radius: number, latitude: number, longitude: number, radiusUnits: SpatialUnits, distanceErrorPct: number): IDocumentQuery<T>;
    relatesToShape(fieldName: string, shapeWkt: string, relation: SpatialRelation): IDocumentQuery<T>;
    relatesToShape(fieldName: string, shapeWkt: string, relation: SpatialRelation, distanceErrorPct: number): IDocumentQuery<T>;
    orderByDistance(field: DynamicSpatialField, latitude: number, longitude: number): IDocumentQuery<T>;
    orderByDistance(field: DynamicSpatialField, shapeWkt: string): IDocumentQuery<T>;
    orderByDistance(fieldName: string, latitude: number, longitude: number): IDocumentQuery<T>;
    orderByDistance(fieldName: string, shapeWkt: string): IDocumentQuery<T>;
    orderByDistanceDescending(field: DynamicSpatialField, latitude: number, longitude: number): IDocumentQuery<T>;
    orderByDistanceDescending(field: DynamicSpatialField, shapeWkt: string): IDocumentQuery<T>;
    orderByDistanceDescending(fieldName: string, latitude: number, longitude: number): IDocumentQuery<T>;
    orderByDistanceDescending(fieldName: string, shapeWkt: string): IDocumentQuery<T>;
}
