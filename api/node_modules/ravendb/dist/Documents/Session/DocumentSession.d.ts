import { IDocumentSession, LoadOptions, ConcurrencyCheckMode, SessionLoadStartingWithOptions, IDocumentSessionImpl } from "./IDocumentSession";
import { RequestExecutor } from "../../Http/RequestExecutor";
import { DocumentConventions } from "../Conventions/DocumentConventions";
import { AbstractCallback } from "../../Types/Callbacks";
import { IRavenObject, EntitiesCollectionObject } from "../../Types";
import { DocumentType } from "../DocumentAbstractions";
import { InMemoryDocumentSessionOperations } from "./InMemoryDocumentSessionOperations";
import { DocumentStore } from "../DocumentStore";
import { ILoaderWithInclude } from "./Loaders/ILoaderWithInclude";
import { IRawDocumentQuery } from "./IRawDocumentQuery";
import { AdvancedDocumentQueryOptions, DocumentQueryOptions } from "./QueryOptions";
import { IDocumentQuery } from "./IDocumentQuery";
export interface IStoredRawEntityInfo {
    originalValue: object;
    metadata: object;
    originalMetadata: object;
    id: string;
    changeVector?: string | null;
    expectedChangeVector?: string | null;
    concurrencyCheckMode: ConcurrencyCheckMode;
    documentType: DocumentType;
}
export declare class DocumentSession extends InMemoryDocumentSessionOperations implements IDocumentSession, IDocumentSessionImpl {
    constructor(dbName: string, documentStore: DocumentStore, id: string, requestExecutor: RequestExecutor);
    readonly advanced: this;
    protected _generateId(entity: object): Promise<string>;
    numberOfRequestsInSession: number;
    conventions: DocumentConventions;
    load<TEntity extends object = IRavenObject>(id: string, callback?: AbstractCallback<TEntity>): Promise<TEntity>;
    load<TEntity extends object = IRavenObject>(id: string, options?: LoadOptions<TEntity>, callback?: AbstractCallback<TEntity>): Promise<TEntity>;
    load<TEntity extends object = IRavenObject>(id: string, documentType?: DocumentType<TEntity>, callback?: AbstractCallback<TEntity>): Promise<TEntity>;
    load<TEntity extends object = IRavenObject>(ids: string[], callback?: AbstractCallback<EntitiesCollectionObject<TEntity>>): Promise<EntitiesCollectionObject<TEntity>>;
    load<TEntity extends object = IRavenObject>(ids: string[], options?: LoadOptions<TEntity>, callback?: AbstractCallback<TEntity>): Promise<EntitiesCollectionObject<TEntity>>;
    load<TEntity extends object = IRavenObject>(ids: string[], documentType?: DocumentType<TEntity>, callback?: AbstractCallback<TEntity>): Promise<EntitiesCollectionObject<TEntity>>;
    private _loadInternal<T>(ids, operation);
    saveChanges(): Promise<void>;
    saveChanges(callback?: AbstractCallback<void>): Promise<void>;
    refresh<TEntity extends object>(entity: TEntity): Promise<void>;
    exists(id: string): Promise<boolean>;
    loadStartingWith<TEntity extends object>(idPrefix: string, callback?: AbstractCallback<TEntity[]>): Promise<TEntity[]>;
    loadStartingWith<TEntity extends object>(idPrefix: string, opts: SessionLoadStartingWithOptions<TEntity>, callback?: AbstractCallback<TEntity[]>): Promise<TEntity[]>;
    private _loadStartingWithInternal<TEntity>(idPrefix, operation, opts);
    loadInternal<TResult extends object>(ids: string[], includes: string[], documentType: DocumentType<TResult>): Promise<EntitiesCollectionObject<TResult>>;
    include(path: string): ILoaderWithInclude;
    rawQuery<TEntity extends object>(query: string, documentType?: DocumentType<TEntity>): IRawDocumentQuery<TEntity>;
    query<TEntity extends object>(documentType: DocumentType<TEntity>): IDocumentQuery<TEntity>;
    query<TEntity extends object>(opts: DocumentQueryOptions<TEntity>): IDocumentQuery<TEntity>;
    documentQuery<T extends object>(opts: AdvancedDocumentQueryOptions<T>): IDocumentQuery<T>;
    documentQuery<T extends object>(documentType: DocumentType<T>): IDocumentQuery<T>;
    protected _processQueryParameters<T extends object>(opts: AdvancedDocumentQueryOptions<T>, conventions: DocumentConventions): {
        indexName: string;
        collection: string;
    };
}
