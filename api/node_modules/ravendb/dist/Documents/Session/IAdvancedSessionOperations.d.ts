import { RequestExecutor } from "../../Http/RequestExecutor";
import { ServerNode } from "../../Http/ServerNode";
import { ICommandData } from "../Commands/CommandData";
import { DocumentType } from "../DocumentAbstractions";
import { IDocumentStore } from "../IDocumentStore";
import { DocumentsChanges } from "./DocumentsChanges";
import { EntityToJson } from "./EntityToJson";
import { IMetadataDictionary, SessionLoadStartingWithOptions } from "./IDocumentSession";
import { IRawDocumentQuery } from "./IRawDocumentQuery";
import { SessionEventsEmitter } from "./SessionEvents";
import { IDocumentQuery } from "./IDocumentQuery";
import { AdvancedDocumentQueryOptions } from "./QueryOptions";
import { AbstractCallback } from "../../Types/Callbacks";
export interface IAdvancedSessionOperations extends IAdvancedDocumentSessionOperations {
    refresh<TEntity extends object>(entity: TEntity): Promise<void>;
    rawQuery<TResult extends object>(query: string, documentType?: DocumentType<TResult>): IRawDocumentQuery<TResult>;
    exists(id: string): Promise<boolean>;
    loadStartingWith<T extends object>(idPrefix: string, opts: SessionLoadStartingWithOptions<T>, callback?: AbstractCallback<T[]>): Promise<T[]>;
    loadStartingWith<T extends object>(idPrefix: string, callback?: AbstractCallback<T[]>): Promise<T[]>;
    documentQuery<TEntity extends object>(opts: AdvancedDocumentQueryOptions<TEntity>): IDocumentQuery<TEntity>;
    documentQuery<TEntity extends object>(documentType: DocumentType<TEntity>): IDocumentQuery<TEntity>;
}
export interface IAdvancedDocumentSessionOperations extends SessionEventsEmitter {
    documentStore: IDocumentStore;
    externalState: Map<string, object>;
    getCurrentSessionNode(): Promise<ServerNode>;
    requestExecutor: RequestExecutor;
    hasChanges(): boolean;
    maxNumberOfRequestsPerSession: number;
    numberOfRequests: number;
    storeIdentifier: string;
    useOptimisticConcurrency: boolean;
    clear(): void;
    defer(...commands: ICommandData[]): void;
    evict<TEntity extends object>(entity: TEntity): void;
    getDocumentId(entity: object): string;
    getMetadataFor<T extends object>(instance: T): IMetadataDictionary;
    getChangeVectorFor<T extends object>(instance: T): string;
    getLastModifiedFor<T extends object>(instance: T): Date;
    hasChanged(entity: object): boolean;
    isLoaded(id: string): boolean;
    ignoreChangesFor(entity: object): void;
    whatChanged(): {
        [id: string]: DocumentsChanges[];
    };
    entityToJson: EntityToJson;
}
