import { IDocumentQueryBaseSingle } from "./IDocumentQueryBaseSingle";
import { IEnumerableQuery } from "./IEnumerableQuery";
import { QueryResult } from "../Queries/QueryResult";
import { DocumentType } from "../DocumentAbstractions";
import { QueryData } from "../Queries/QueryData";
import { GroupBy } from "../Queries/GroupBy";
import { IDocumentQueryBase } from "./IDocumentQueryBase";
import { IGroupByDocumentQuery } from "./IGroupByDocumentQuery";
export interface IDocumentQuery<T extends object> extends IDocumentQueryBase<T, IDocumentQuery<T>>, IDocumentQueryBaseSingle<T>, IEnumerableQuery<T> {
    indexName: any;
    isDistinct: any;
    getQueryResult(): Promise<QueryResult>;
    selectFields<TProjection extends object>(property: string, projectionClass: DocumentType<TProjection>): IDocumentQuery<TProjection>;
    selectFields<TProjection extends object>(properties: string[], projectionClass: DocumentType<TProjection>): IDocumentQuery<TProjection>;
    selectFields<TProjection extends object>(properties: string[]): IDocumentQuery<TProjection>;
    selectFields<TProjection extends Object>(property: string): IDocumentQuery<TProjection>;
    selectFields<TProjection extends object>(queryData: QueryData, projectionClass: DocumentType<T>): IDocumentQuery<TProjection>;
    ofType<TResult extends object>(resultClass: DocumentType<TResult>): IDocumentQuery<TResult>;
    groupBy(fieldName: string, ...fieldNames: string[]): IGroupByDocumentQuery<T>;
    groupBy(field: GroupBy, ...fields: GroupBy[]): IGroupByDocumentQuery<T>;
}
