import { IQueryBase } from "./IQueryBase";
import { IFilterDocumentQueryBase } from "./IFilterDocumentQueryBase";
import { OrderingType } from "./OrderingType";
import { DynamicSpatialField } from "../Queries/Spatial/DynamicSpatialField";
export interface IDocumentQueryBase<T extends object, TSelf extends IDocumentQueryBase<T, TSelf>> extends IQueryBase<T, TSelf>, IFilterDocumentQueryBase<T, TSelf> {
    addOrder(fieldName: string, descending: boolean): TSelf;
    addOrder(fieldName: string, descending: boolean, ordering: OrderingType): TSelf;
    boost(boost: number): TSelf;
    distinct(): TSelf;
    fuzzy(fuzzy: number): TSelf;
    include(path: string): TSelf;
    intersect(): TSelf;
    orderBy(field: string): TSelf;
    orderBy(field: string, ordering: OrderingType): TSelf;
    orderByDescending(field: string): TSelf;
    orderByDescending(field: string, ordering: OrderingType): TSelf;
    orderByScore(): TSelf;
    orderByScoreDescending(): TSelf;
    proximity(proximity: number): TSelf;
    randomOrdering(): TSelf;
    randomOrdering(seed: string): TSelf;
    orderByDistance(field: DynamicSpatialField, latitude: number, longitude: number): TSelf;
    orderByDistance(field: DynamicSpatialField, shapeWkt: string): TSelf;
    orderByDistance(fieldName: string, latitude: number, longitude: number): TSelf;
    orderByDistance(fieldName: string, shapeWkt: string): TSelf;
    orderByDistanceDescending(field: DynamicSpatialField, latitude: number, longitude: number): TSelf;
    orderByDistanceDescending(field: DynamicSpatialField, shapeWkt: string): TSelf;
    orderByDistanceDescending(fieldName: string, latitude: number, longitude: number): TSelf;
    orderByDistanceDescending(fieldName: string, shapeWkt: string): TSelf;
}
