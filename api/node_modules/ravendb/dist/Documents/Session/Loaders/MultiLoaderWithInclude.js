"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const BluebirdPromise = require("bluebird");
const TypeUtil_1 = require("../../../Utility/TypeUtil");
class MultiLoaderWithInclude {
    constructor(session) {
        this._includes = [];
        this._session = session;
    }
    include(path) {
        this._includes.push(path);
        return this;
    }
    load(ids, documentType, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            callback = callback || TypeUtil_1.TypeUtil.NOOP;
            let singleResult = false;
            if (TypeUtil_1.TypeUtil.isString(ids)) {
                ids = [ids];
                singleResult = true;
            }
            const entityType = this._session.conventions.findEntityType(documentType);
            const result = BluebirdPromise.resolve()
                .then(() => this._session.loadInternal(ids, this._includes, entityType))
                .then(results => {
                return singleResult ?
                    Object.keys(results).map(x => results[x])[0] :
                    results;
            })
                .tap((results) => callback(null, results))
                .tapCatch(err => callback(err));
            return Promise.resolve(result);
        });
    }
}
exports.MultiLoaderWithInclude = MultiLoaderWithInclude;
