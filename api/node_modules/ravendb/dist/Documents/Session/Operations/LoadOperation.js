"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const LogUtil_1 = require("../../../Utility/LogUtil");
const DocumentInfo_1 = require("../DocumentInfo");
const GetDocumentsCommand_1 = require("../../Commands/GetDocumentsCommand");
const TypeUtil_1 = require("../../../Utility/TypeUtil");
const log = LogUtil_1.getLogger({ module: "LoadOperation" });
class LoadOperation {
    constructor(session) {
        this._idsToCheckOnServer = [];
        this._session = session;
    }
    createRequest() {
        if (this._idsToCheckOnServer.length === 0) {
            return null;
        }
        if (this._session.checkIfIdAlreadyIncluded(this._ids, this._includes)) {
            return null;
        }
        this._session.incrementRequestCount();
        log.info("Requesting the following ids "
            + this._idsToCheckOnServer.join(",") + " from " + this._session.storeIdentifier);
        return new GetDocumentsCommand_1.GetDocumentsCommand({
            ids: this._idsToCheckOnServer,
            includes: this._includes,
            metadataOnly: false
        });
    }
    byId(id) {
        if (!id) {
            return this;
        }
        if (!this._ids) {
            this._ids = [id];
        }
        if (this._session.isLoadedOrDeleted(id)) {
            return this;
        }
        this._idsToCheckOnServer.push(id);
        return this;
    }
    withIncludes(includes) {
        this._includes = includes || [];
        return this;
    }
    byIds(ids) {
        if (!ids || !ids.length) {
            return this;
        }
        this._ids = ids;
        const distinct = new Set(ids.filter(x => !!x));
        for (const id of distinct) {
            this.byId(id);
        }
        return this;
    }
    _getDocument(clazz, id) {
        if (!id) {
            return null;
        }
        if (this._session.isDeleted(id)) {
            return null;
        }
        let doc = this._session.documentsById.getValue(id);
        if (doc) {
            return this._session.trackEntity(clazz, doc);
        }
        doc = this._session.includedDocumentsById.get(id);
        if (doc) {
            return this._session.trackEntity(clazz, doc);
        }
        return null;
    }
    getDocuments(clazz) {
        return this._ids.filter(x => !!x)
            .reduce((result, id) => {
            result[id] = this._getDocument(clazz, id);
            return result;
        }, {});
    }
    setResult(result) {
        if (!result) {
            return;
        }
        this._session.registerIncludes(result.includes);
        for (const document of result.results) {
            if (!document || TypeUtil_1.TypeUtil.isNullOrUndefined(document)) {
                continue;
            }
            const newDocumentInfo = DocumentInfo_1.DocumentInfo.getNewDocumentInfo(document);
            this._session.documentsById.add(newDocumentInfo);
        }
        this._session.registerMissingIncludes(result.results, result.includes, this._includes);
    }
}
exports.LoadOperation = LoadOperation;
