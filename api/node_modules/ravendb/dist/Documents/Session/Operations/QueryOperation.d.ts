import { InMemoryDocumentSessionOperations } from "../InMemoryDocumentSessionOperations";
import { IndexQuery } from "../../Queries/IndexQuery";
import { QueryResult } from "../../Queries/QueryResult";
import { FieldsToFetchToken } from "../Tokens/FieldsToFetchToken";
import { Stopwatch } from "../../../Utility/Stopwatch";
import { QueryCommand } from "../../Commands/QueryCommand";
import { IDisposable } from "../../../Types/Contracts";
import { DocumentType } from "../../DocumentAbstractions";
export declare class QueryOperation {
    private _session;
    private _indexName;
    private _indexQuery;
    private _metadataOnly;
    private _indexEntriesOnly;
    private _currentQueryResults;
    private _fieldsToFetch;
    private _sp;
    private _disableEntitiesTracking;
    constructor(session: InMemoryDocumentSessionOperations, indexName: string, indexQuery: IndexQuery, fieldsToFetch: FieldsToFetchToken, disableEntitiesTracking: boolean, metadataOnly: boolean, indexEntriesOnly: boolean);
    createRequest(): QueryCommand;
    getCurrentQueryResults(): QueryResult;
    setResult(queryResult: QueryResult): void;
    private _assertPageSizeSet();
    private _startTiming();
    logQuery(): void;
    enterQueryContext(): IDisposable;
    complete<T extends object>(documentType?: DocumentType<T>): T[];
    static deserialize<T extends object>(id: string, document: object, metadata: object, fieldsToFetch: FieldsToFetchToken, disableEntitiesTracking: boolean, session: InMemoryDocumentSessionOperations, clazz?: DocumentType<T>): any;
    isDisableEntitiesTracking(): boolean;
    setDisableEntitiesTracking(disableEntitiesTracking: boolean): void;
    ensureIsAcceptableAndSaveResult(result: QueryResult): void;
    static ensureIsAcceptable(result: QueryResult, waitForNonStaleResults: boolean, duration: Stopwatch, session: InMemoryDocumentSessionOperations): void;
    readonly indexQuery: IndexQuery;
}
