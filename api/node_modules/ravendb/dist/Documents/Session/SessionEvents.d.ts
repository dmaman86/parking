import { InMemoryDocumentSessionOperations } from "./InMemoryDocumentSessionOperations";
import { IMetadataDictionary } from "./IDocumentSession";
export interface SessionEventsEmitter {
    on(eventName: "beforeStore", eventHandler: (eventArgs: SessionBeforeStoreEventArgs) => void): this;
    on(eventName: "afterSaveChanges", eventHandler: (eventArgs: SessionAfterSaveChangesEventArgs) => void): this;
    on(eventName: "beforeQuery", eventHandler: (eventArgs: SessionBeforeQueryEventArgs) => void): this;
    on(eventName: "beforeDelete", eventHandler: (eventArgs: SessionBeforeDeleteEventArgs) => void): this;
    removeListener(eventName: "beforeStore", eventHandler: (eventArgs: SessionBeforeStoreEventArgs) => void): this;
    removeListener(eventName: "afterSaveChanges", eventHandler: (eventArgs: SessionAfterSaveChangesEventArgs) => void): this;
    removeListener(eventName: "beforeQuery", eventHandler: (eventArgs: SessionBeforeQueryEventArgs) => void): this;
    removeListener(eventName: "beforeDelete", eventHandler: (eventArgs: SessionBeforeDeleteEventArgs) => void): this;
    emit(eventName: "beforeStore", eventArgs: SessionBeforeStoreEventArgs): any;
    emit(eventName: "afterSaveChanges", eventArgs: SessionAfterSaveChangesEventArgs): any;
    emit(eventName: "beforeQuery", eventArgs: SessionBeforeQueryEventArgs): any;
    emit(eventName: "beforeDelete", eventArgs: SessionBeforeDeleteEventArgs): any;
}
export declare class SessionBeforeStoreEventArgs {
    private _documentMetadata;
    private _session;
    private _documentId;
    private _entity;
    constructor(session: InMemoryDocumentSessionOperations, documentId: string, entity: object);
    readonly session: InMemoryDocumentSessionOperations;
    readonly documentId: string;
    getEntity(): Object;
    isMetadataAccessed(): boolean;
    getDocumentMetadata(): IMetadataDictionary;
}
export declare class SessionBeforeQueryEventArgs {
    session: InMemoryDocumentSessionOperations;
    constructor(session: InMemoryDocumentSessionOperations);
}
export declare class SessionBeforeDeleteEventArgs {
    private _documentMetadata;
    private _session;
    private _documentId;
    private _entity;
    constructor(session: InMemoryDocumentSessionOperations, documentId: string, entity: object);
    readonly session: InMemoryDocumentSessionOperations;
    readonly documentId: string;
    readonly entity: object;
    readonly documentMetadata: IMetadataDictionary;
}
export declare class SessionAfterSaveChangesEventArgs {
    private _documentMetadata;
    session: InMemoryDocumentSessionOperations;
    documentId: string;
    entity: object;
    constructor(session: InMemoryDocumentSessionOperations, documentId: string, entity: object);
    readonly documentMetadata: IMetadataDictionary;
}
