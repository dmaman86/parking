"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const QueryToken_1 = require("./QueryToken");
const Exceptions_1 = require("../../../Exceptions");
class OrderByToken extends QueryToken_1.QueryToken {
    constructor(fieldName, descending, ordering) {
        super();
        this._fieldName = fieldName;
        this._descending = descending;
        this._ordering = ordering;
    }
    static createDistanceAscending(fieldName, shapeWktOrLatitudeParameterName, longitudeParameterName) {
        if (longitudeParameterName) {
            return this._createDistanceAscendingLatLng(fieldName, shapeWktOrLatitudeParameterName, longitudeParameterName);
        }
        else {
            return this._createDistanceAscendingWkt(fieldName, shapeWktOrLatitudeParameterName);
        }
    }
    static _createDistanceAscendingLatLng(fieldName, latitudeParameterName, longitudeParameterName) {
        return new OrderByToken("spatial.distance(" + fieldName +
            ", spatial.point($" + latitudeParameterName
            + ", $" + longitudeParameterName + "))", false, "String");
    }
    static _createDistanceAscendingWkt(fieldName, shapeWktParameterName) {
        return new OrderByToken("spatial.distance(" + fieldName
            + ", spatial.wkt($" + shapeWktParameterName + "))", false, "String");
    }
    static _createDistanceDescendingLatLng(fieldName, latitudeParameterName, longitudeParameterName) {
        return new OrderByToken("spatial.distance(" + fieldName
            + ", spatial.point($" + latitudeParameterName
            + ", $" + longitudeParameterName + "))", true, "String");
    }
    static _createDistanceDescendingWkt(fieldName, shapeWktParameterName) {
        return new OrderByToken("spatial.distance(" + fieldName
            + ", spatial.wkt($" + shapeWktParameterName + "))", true, "String");
    }
    static createDistanceDescending(fieldName, shapeWktOrLatitudeParameterName, longitudeParameterName) {
        if (longitudeParameterName) {
            return this._createDistanceDescendingLatLng(fieldName, shapeWktOrLatitudeParameterName, longitudeParameterName);
        }
        else {
            return this._createDistanceDescendingWkt(fieldName, shapeWktOrLatitudeParameterName);
        }
    }
    static createRandom(seed) {
        if (!seed) {
            Exceptions_1.throwError("InvalidArgumentException", "seed cannot be null");
        }
        return new OrderByToken("random('" + seed.replace(/'/g, "''") + "')", false, "String");
    }
    static createAscending(fieldName, ordering) {
        return new OrderByToken(fieldName, false, ordering);
    }
    static createDescending(fieldName, ordering) {
        return new OrderByToken(fieldName, true, ordering);
    }
    writeTo(writer) {
        this._writeField(writer, this._fieldName);
        switch (this._ordering) {
            case "Long":
                writer.append(" as long");
                break;
            case "Double":
                writer.append(" as double");
                break;
            case "AlphaNumeric":
                writer.append(" as alphaNumeric");
                break;
        }
        if (this._descending) {
            writer.append(" desc");
        }
    }
}
OrderByToken.random = new OrderByToken("random()", false, "String");
OrderByToken.scoreAscending = new OrderByToken("score()", false, "String");
OrderByToken.scoreDescending = new OrderByToken("score()", true, "String");
exports.OrderByToken = OrderByToken;
