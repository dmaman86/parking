import { HttpResponse } from "../Primitives/Http";
export declare function printError(err: Error): string;
export declare function throwError(errName: RavenErrorType): any;
export declare function throwError(errName: RavenErrorType, message: string): any;
export declare function throwError(errName: RavenErrorType, message: string, errCause?: Error): any;
export declare function throwError(errName: RavenErrorType, message: string, errCause?: Error, info?: {
    [key: string]: any;
}): any;
export declare function getError(errName: RavenErrorType, message: string): Error;
export declare function getError(errName: string, message: string, errCause?: Error, info?: {
    [key: string]: any;
}): Error;
export declare function getError(errName: string, message: string, errCause?: Error): Error;
export declare type RavenErrorType = "RavenException" | "NotSupportedException" | "InvalidOperationException" | "InvalidArgumentException" | "ErrorResponseException" | "DocumentDoesNotExistsException" | "NonUniqueObjectException" | "ConcurrencyException" | "ArgumentNullException" | "ArgumentOutOfRangeException" | "DatabaseDoesNotExistException" | "AuthorizationException" | "IndexDoesNotExistException" | "DatabaseLoadTimeoutException" | "AuthenticationException" | "BadRequestException" | "BulkInsertAbortedException" | "BulkInsertProtocolViolationException" | "IndexCompilationException" | "TransformerCompilationException" | "DocumentConflictException" | "DocumentDoesNotExistException" | "DocumentParseException" | "IndexInvalidException" | "IndexOrTransformerAlreadyExistException" | "JavaScriptException" | "JavaScriptParseException" | "SubscriptionClosedException" | "SubscriptionDoesNotBelongToNodeException" | "SubscriptionDoesNotExistException" | "SubscriptionException" | "SubscriptionInUseException" | "TransformerDoesNotExistException" | "VersioningDisabledException" | "TopologyNodeDownException" | "AllTopologyNodesDownException" | "BadResponseException" | "ChangeProcessingException" | "CommandExecutionException" | "NoLeaderException" | "CompilationException" | "ConflictException" | "DatabaseConcurrentLoadTimeoutException" | "DatabaseDisabledException" | "DatabaseLoadFailureException" | "DatabaseNotFoundException" | "NotSupportedOsException" | "SecurityException" | "ServerLoadFailureException" | "UnsuccessfulRequestException" | "CriticalIndexingException" | "IndexAnalyzerException" | "IndexCorruptionException" | "IndexOpenException" | "IndexWriteException" | "IndexWriterCreationException" | "StorageException" | "StreamDisposedException" | "LowMemoryException" | "IncorrectDllException" | "DiskFullException" | "InvalidJournalFlushRequestException" | "QuotaException" | "VoronUnrecoverableErrorException" | "NonDurableFileSystemException" | "TimeoutException" | "AggregateException" | "OperationCancelledException" | "MappingError" | "UrlScrappingError" | "TestDriverTearDownError" | "FileNotFoundException" | "NotImplementedException";
export interface ExceptionSchema {
    url: string;
    type: string;
    message: string;
    error: string;
}
export interface ExceptionDispatcherArgs {
    message: string;
    error?: string;
    type?: string;
}
export declare class ExceptionDispatcher {
    private static _jsonSerializer;
    static get(opts: ExceptionDispatcherArgs, code: number): Error;
    static throwException(response: HttpResponse): void;
    private static _getConflictError(schema, json);
    private static _getType(typeAsString);
}
