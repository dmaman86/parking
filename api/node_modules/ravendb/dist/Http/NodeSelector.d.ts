import { ServerNode } from "../Http/ServerNode";
import CurrentIndexAndNode from "../Http/CurrentIndexAndNode";
import { Topology } from "./Topology";
export declare class NodeSelector {
    private _updateFastestNodeTimer;
    private _state;
    constructor(topology: Topology);
    getTopology(): Topology;
    onFailedRequest(nodeIndex: number): void;
    onUpdateTopology(topology: Topology, forceUpdate?: boolean): boolean;
    getNodeBySessionId(sessionId: number): CurrentIndexAndNode;
    getPreferredNode(): CurrentIndexAndNode;
    private static _unlikelyEveryoneFaultedChoice(state);
    getFastestNode(): CurrentIndexAndNode;
    restoreNodeIndex(nodeIndex: number): void;
    protected _throwEmptyTopology(): void;
    private _switchToSpeedTestPhase();
    inSpeedTestPhase(): boolean;
    recordFastest(index: number, node: ServerNode): void;
    private static _findMaxIndex(state);
    private _selectFastest(state, index);
    scheduleSpeedTest(): void;
}
