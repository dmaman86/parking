import { ServerNode } from "./ServerNode";
import { HttpCache } from "../Http/HttpCache";
import { HttpRequestBase, HttpResponse } from "../Primitives/Http";
import { IRavenObject } from "../Types/IRavenObject";
import { HeadersBuilder } from "../Utility/HttpUtil";
import { TypesAwareObjectMapper, TypeInfo } from "../Mapping/ObjectMapper";
import { ObjectTypeDescriptor } from "..";
import { JsonSerializer } from "../Mapping/Json/Serializer";
export declare type RavenCommandResponseType = "Empty" | "Object" | "Raw";
export declare type ResponseDisposeHandling = "Automatic" | "Manually";
export interface IRavenResponse extends IRavenObject {
}
export declare abstract class RavenCommand<TResult> {
    result: TResult;
    statusCode: number;
    failedNodes: Map<ServerNode, Error>;
    protected _responseType: RavenCommandResponseType;
    protected _canCache: boolean;
    protected _canCacheAggressively: boolean;
    protected _typedObjectMapper: TypesAwareObjectMapper;
    readonly abstract isReadRequest: boolean;
    readonly responseType: RavenCommandResponseType;
    readonly canCache: boolean;
    readonly canCacheAggressively: boolean;
    constructor();
    abstract createRequest(node: ServerNode): HttpRequestBase;
    protected readonly _serializer: JsonSerializer;
    setResponse(response: string, fromCache: boolean): void;
    send(requestOptions: HttpRequestBase): Promise<HttpResponse>;
    setResponseRaw(response: HttpResponse, body: string): void;
    protected _throwInvalidResponse(): void;
    protected _urlEncode(value: any): string;
    static ensureIsNotNullOrEmpty(value: string, name: string): void;
    isFailedWithNode(node: ServerNode): boolean;
    processResponse(cache: HttpCache, response: HttpResponse, url: string): ResponseDisposeHandling;
    protected _cacheResponse(cache: HttpCache, url: string, response: HttpResponse, responseJson: string): void;
    protected _addChangeVectorIfNotNull(changeVector: string, req: HttpRequestBase): void;
    protected _parseResponseDefault<TResponse extends object>(response: string, typeInfo?: TypeInfo, knownTypes?: Map<string, ObjectTypeDescriptor>): TResponse;
    protected _getHeaders(): HeadersBuilder;
    onResponseFailure(response: HttpResponse): void;
}
