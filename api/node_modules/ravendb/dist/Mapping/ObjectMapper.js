"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const DateUtil_1 = require("../Utility/DateUtil");
const Exceptions_1 = require("../Exceptions");
const TypeUtil_1 = require("../Utility/TypeUtil");
const changeCase = require("change-object-case");
const LogUtil_1 = require("../Utility/LogUtil");
const log = LogUtil_1.getLogger({ module: "ObjectMapper" });
class ObjectKeysTransform {
    static camelCase(obj, recursive = false) {
        return changeCase.camelKeys(obj, { recursive });
    }
}
exports.ObjectKeysTransform = ObjectKeysTransform;
class TypesAwareObjectMapper {
    constructor(opts) {
        this._throwMappingErrors = false;
        if (opts) {
            this._dateFormat = opts.dateFormat;
            this._knownTypes = opts.knownTypes || new Map();
        }
    }
    get throwMappingErrors() {
        return this._throwMappingErrors;
    }
    set throwMappingErrors(value) {
        this._throwMappingErrors = value;
    }
    registerType(classCtorOrTypeDescriptor) {
        this._knownTypes.set(classCtorOrTypeDescriptor.name, classCtorOrTypeDescriptor);
        return this;
    }
    fromObjectLiteral(rawResult, typeInfo, knownTypes) {
        const typeName = typeInfo ? typeInfo.typeName : null;
        const nestedTypes = typeInfo ? typeInfo.nestedTypes : null;
        const types = knownTypes || this._knownTypes;
        const ctorOrTypeDescriptor = this._getKnownType(typeName, types);
        const result = this._instantiateObject(typeName, rawResult, ctorOrTypeDescriptor);
        this._applyNestedTypes(result, nestedTypes, types);
        return result;
    }
    _applyNestedTypes(obj, nestedTypes, knownTypes) {
        if (!nestedTypes) {
            return obj;
        }
        const nestedTypesKeys = Object.keys(nestedTypes);
        nestedTypesKeys.sort();
        for (const propertyPath of nestedTypesKeys) {
            const typeName = nestedTypes[propertyPath];
            const objPathSegments = propertyPath
                .replace(/\[/g, "![")
                .replace(/\$MAP/g, "!$MAP")
                .replace(/\$SET/g, "!$SET")
                .split(/[!.]/g);
            const fieldContext = this._getFieldContext(obj, objPathSegments);
            const fieldContexts = Array.isArray(fieldContext) ? fieldContext : [fieldContext];
            fieldContexts.forEach((c, i) => this._applyTypeToNestedProperty(typeName, c, knownTypes));
        }
        return obj;
    }
    toObjectLiteral(obj, typeInfoCallback, knownTypes) {
        const types = (knownTypes || this._knownTypes);
        let nestedTypes;
        const result = this._makeObjectLiteral(obj, null, (nestedType) => {
            nestedTypes = Object.assign(nestedTypes || {}, nestedType);
        }, Array.from(types.values()));
        let typeName;
        if (TypeUtil_1.TypeUtil.isClass(obj)) {
            typeName = obj.constructor.name;
        }
        else {
            const typeDescriptor = TypeUtil_1.TypeUtil.findType(obj, Array.from(types.values()));
            typeName = typeDescriptor ? typeDescriptor.name : null;
        }
        const typeInfo = {};
        typeInfo.typeName = typeName || null;
        typeInfo.nestedTypes = nestedTypes || {};
        if (typeInfoCallback) {
            typeInfoCallback(typeInfo);
        }
        return result;
    }
    _getFieldContext(parent, objPath) {
        let [field, ...fieldsPathTail] = objPath;
        const isFieldArray = field.endsWith("[]");
        if (isFieldArray) {
            field = field.replace(/\[\]$/g, "");
        }
        const isFieldSet = field.endsWith("$SET");
        if (isFieldSet) {
            field = field.replace(/\$SET$/g, "");
        }
        const isFieldMap = field.endsWith("$MAP");
        if (isFieldMap) {
            field = field.replace(/\$MAP$/g, "");
        }
        let fieldVal = parent[field];
        if (!parent.hasOwnProperty(field)) {
            if (isFieldArray || isFieldSet || isFieldMap) {
                fieldVal = parent;
            }
            else {
                return null;
            }
        }
        if (isFieldArray) {
            return this._getFieldContextsForArrayElements(fieldVal, fieldsPathTail);
        }
        if (isFieldSet) {
            return this._getFieldContextsForSetElements(fieldVal, fieldsPathTail);
        }
        if (isFieldMap) {
            return this._getFieldContextsForMapEntries(fieldVal, fieldsPathTail);
        }
        if (fieldsPathTail.length) {
            return this._getFieldContext(parent[field], fieldsPathTail);
        }
        return {
            parent,
            field,
            getValue() { return parent[field]; },
            setValue(val) { parent[field] = val; }
        };
    }
    _getFieldContextsForMapEntries(mapFieldVal, fieldsPathTail) {
        const result = Array.from(mapFieldVal.entries()).map(([key, val]) => {
            if (!fieldsPathTail.length) {
                return {
                    parent: mapFieldVal,
                    field: key,
                    getValue: () => val,
                    setValue: (newVal) => {
                        mapFieldVal.set(key, newVal);
                    }
                };
            }
            else {
                return this._getFieldContext(val, fieldsPathTail);
            }
        });
        return this._flattenFieldContexts(result);
    }
    _getFieldContextsForSetElements(setFieldVal, fieldsPathTail) {
        const result = Array.from(setFieldVal).map(x => {
            if (!fieldsPathTail.length) {
                return {
                    parent: setFieldVal,
                    field: x,
                    getValue: () => x,
                    setValue: (val) => {
                        setFieldVal.delete(x);
                        setFieldVal.add(val);
                    }
                };
            }
            else {
                return this._getFieldContext(x, fieldsPathTail);
            }
        });
        return this._flattenFieldContexts(result);
    }
    _getFieldContextsForArrayElements(fieldVal, fieldsPathTail) {
        const result = fieldVal.map((x, i) => {
            if (!fieldsPathTail.length) {
                return {
                    parent: fieldVal,
                    field: i.toString(),
                    getValue() { return fieldVal[i]; },
                    setValue(val) { fieldVal[i] = val; }
                };
            }
            else {
                return this._getFieldContext(x, fieldsPathTail);
            }
        });
        return this._flattenFieldContexts(result);
    }
    _flattenFieldContexts(arr) {
        return arr.reduce((result, next) => {
            if (Array.isArray(next)) {
                return result.concat(next);
            }
            result.push(next);
            return result;
        }, []);
    }
    _applyTypeToNestedProperty(fieldTypeName, fieldContext, knownTypes) {
        let parent;
        let field;
        if (fieldContext) {
            ({ parent, field } = fieldContext);
        }
        if (typeof parent === "undefined") {
            return;
        }
        const fieldVal = fieldContext.getValue();
        if (typeof fieldVal === "undefined") {
            return;
        }
        if (fieldTypeName === "date") {
            fieldContext.setValue(DateUtil_1.DateUtil.parse(fieldVal));
            return;
        }
        if (fieldTypeName === "Set") {
            fieldContext.setValue(new Set(fieldVal));
            return;
        }
        if (fieldTypeName === "Map") {
            const mapEntries = Object.keys(fieldVal)
                .reduce((result, next) => {
                return [...result, [next, fieldVal[next]]];
            }, []);
            fieldContext.setValue(new Map(mapEntries));
            return;
        }
        if (Array.isArray(fieldVal)) {
            fieldVal.forEach((item, i) => {
                this._applyTypeToNestedProperty(fieldTypeName, {
                    field: i.toString(),
                    parent: fieldVal,
                    getValue: () => fieldVal[i],
                    setValue: (val) => fieldVal[i] = val
                }, knownTypes);
            });
            return;
        }
        const ctorOrTypeDescriptor = this._getKnownType(fieldTypeName, knownTypes);
        const instance = this._instantiateObject(fieldTypeName, fieldVal, ctorOrTypeDescriptor);
        fieldContext.setValue(instance);
    }
    _instantiateObject(typeName, rawValue, ctorOrTypeDescriptor) {
        let instance = null;
        if (!ctorOrTypeDescriptor) {
            instance = Object.assign({}, rawValue);
        }
        else if (TypeUtil_1.TypeUtil.isClass(ctorOrTypeDescriptor)) {
            instance = this._createEmptyObject(ctorOrTypeDescriptor);
            instance = Object.assign(instance, rawValue);
        }
        else if (TypeUtil_1.TypeUtil.isObjectLiteralTypeDescriptor(ctorOrTypeDescriptor)) {
            instance = ctorOrTypeDescriptor.construct(rawValue);
        }
        else {
            Exceptions_1.throwError("InvalidArgumentException", `Invalid type descriptor for type ${typeName}: ${ctorOrTypeDescriptor}`);
        }
        return instance;
    }
    _getKnownType(typeName, knownTypes) {
        if (!typeName) {
            return null;
        }
        const ctorOrTypeDescriptor = knownTypes.get(typeName);
        if (!ctorOrTypeDescriptor) {
            if (this._throwMappingErrors) {
                Exceptions_1.throwError("MappingError", `Could not find type descriptor '${typeName}'.`);
            }
            else {
                log.warn(`Could not find type descriptor '${typeName}'.`);
            }
        }
        return ctorOrTypeDescriptor;
    }
    _createEmptyObject(ctor) {
        if (!ctor) {
            Exceptions_1.throwError("InvalidArgumentException", "ctor argument must not be null or undefined.");
        }
        return new (Function.prototype.bind.apply(ctor));
    }
    _makeObjectLiteral(obj, objPathPrefix, typeInfoCallback, knownTypes) {
        if (TypeUtil_1.TypeUtil.isDate(obj)) {
            typeInfoCallback({
                [objPathPrefix]: "date"
            });
            return DateUtil_1.DateUtil.stringify(obj);
        }
        if (TypeUtil_1.TypeUtil.isSet(obj)) {
            typeInfoCallback({
                [objPathPrefix]: "Set"
            });
            const newObjPathPrefix = `${objPathPrefix}$SET`;
            return Array.from(obj)
                .map(x => this._makeObjectLiteral(x, newObjPathPrefix, typeInfoCallback, knownTypes));
        }
        if (TypeUtil_1.TypeUtil.isMap(obj)) {
            typeInfoCallback({
                [objPathPrefix]: "Map"
            });
            const newObjPathPrefix = `${objPathPrefix}$MAP`;
            const map = obj;
            return Array.from(map.keys()).reduce((result, next) => {
                return Object.assign(result, {
                    [next]: this._makeObjectLiteral(map.get(next), newObjPathPrefix, typeInfoCallback, knownTypes)
                });
            }, {});
        }
        if (Array.isArray(obj)) {
            const newObjPathPrefix = `${objPathPrefix}[]`;
            return obj.map(x => this._makeObjectLiteral(x, newObjPathPrefix, typeInfoCallback, knownTypes));
        }
        if (TypeUtil_1.TypeUtil.isObject(obj)) {
            if (objPathPrefix) {
                const matchedType = TypeUtil_1.TypeUtil.findType(obj, knownTypes);
                if (matchedType
                    && matchedType.name !== "Function") {
                    typeInfoCallback({ [objPathPrefix]: matchedType.name });
                }
            }
            return Object.keys(obj)
                .reduce((result, key) => {
                const fullPath = objPathPrefix ? `${objPathPrefix}.${key}` : key;
                result[key] = this._makeObjectLiteral(obj[key], fullPath, typeInfoCallback, knownTypes);
                return result;
            }, {});
        }
        return obj;
    }
}
exports.TypesAwareObjectMapper = TypesAwareObjectMapper;
