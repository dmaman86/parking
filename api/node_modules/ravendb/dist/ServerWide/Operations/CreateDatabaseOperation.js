"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RavenCommand_1 = require("../../Http/RavenCommand");
const Exceptions_1 = require("../../Exceptions");
const HttpUtil_1 = require("../../Utility/HttpUtil");
class CreateDatabaseOperation {
    get resultType() {
        return "CommandResult";
    }
    constructor(databaseRecord, replicationFactor = 1) {
        this._databaseRecord = databaseRecord;
        this._replicationFactor = replicationFactor;
    }
    getCommand(conventions) {
        return new CreateDatabaseCommand(conventions, this._databaseRecord, this._replicationFactor);
    }
}
exports.CreateDatabaseOperation = CreateDatabaseOperation;
class CreateDatabaseCommand extends RavenCommand_1.RavenCommand {
    constructor(conventions, databaseRecord, replicationFactor) {
        super();
        this._conventions = conventions;
        this._databaseRecord = databaseRecord;
        this._replicationFactor = replicationFactor;
        if (!databaseRecord || !databaseRecord.databaseName) {
            Exceptions_1.throwError("InvalidOperationException", "Database name is required");
        }
        this._databaseName = databaseRecord.databaseName;
    }
    createRequest(node) {
        let uri = node.url + "/admin/databases?name=" + this._databaseName;
        uri += "&replicationFactor=" + this._replicationFactor;
        const databaseDocumentJson = this._serializer.serialize(this._databaseRecord);
        return {
            uri,
            method: "PUT",
            headers: HttpUtil_1.HeadersBuilder.create()
                .withContentTypeJson()
                .build(),
            body: databaseDocumentJson
        };
    }
    setResponse(response, fromCache) {
        if (!response) {
            this._throwInvalidResponse();
        }
        this.result = this._serializer.deserialize(response);
    }
    get isReadRequest() {
        return false;
    }
}
