import { IServerOperation, OperationResultType } from "../../Documents/Operations/OperationAbstractions";
import { DocumentConventions } from "../..";
import { RavenCommand } from "../../Http/RavenCommand";
import { ServerNode } from "../../Http/ServerNode";
import { HttpRequestBase } from "../../Primitives/Http";
export interface DeleteDatabaseResult {
    raftCommandIndex: number;
    pendingDeletes: string[];
}
export interface DeleteDatabasesParameters {
    databaseNames: string | string[];
    hardDelete: boolean;
    fromNodes?: string | string[];
    timeToWaitForConfirmation?: number;
}
export declare class DeleteDatabasesOperation implements IServerOperation<DeleteDatabaseResult> {
    readonly resultType: OperationResultType;
    private _parameters;
    constructor(parameters: DeleteDatabasesParameters);
    getCommand(conventions: DocumentConventions): RavenCommand<DeleteDatabaseResult>;
}
export declare class DeleteDatabaseCommand extends RavenCommand<DeleteDatabaseResult> {
    private _parameters;
    constructor(conventions: DocumentConventions, parameters: DeleteDatabasesParameters);
    createRequest(node: ServerNode): HttpRequestBase;
    setResponse(response: string, fromCache: boolean): void;
    readonly isReadRequest: boolean;
}
