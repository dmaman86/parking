"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Exceptions_1 = require("../../Exceptions");
const RavenCommand_1 = require("../../Http/RavenCommand");
class DeleteDatabasesOperation {
    get resultType() {
        return "CommandResult";
    }
    constructor(parameters) {
        if (!parameters) {
            Exceptions_1.throwError("InvalidArgumentException", "Parameters must be provided.");
        }
        if (!parameters.databaseNames || !parameters.databaseNames.length) {
            Exceptions_1.throwError("InvalidArgumentException", "Database names must be provided.");
        }
        this._parameters = parameters;
    }
    getCommand(conventions) {
        return new DeleteDatabaseCommand(conventions, this._parameters);
    }
}
exports.DeleteDatabasesOperation = DeleteDatabasesOperation;
class DeleteDatabaseCommand extends RavenCommand_1.RavenCommand {
    constructor(conventions, parameters) {
        super();
        if (!conventions) {
            Exceptions_1.throwError("InvalidArgumentException", "Conventions cannot be null");
        }
        if (!parameters) {
            Exceptions_1.throwError("InvalidArgumentException", "Parameters cannot be null.");
        }
        this._parameters = this._serializer.serialize(parameters);
    }
    createRequest(node) {
        const uri = node.url + "/admin/databases";
        return {
            uri,
            method: "DELETE",
            headers: {
                "Content-Type": "application/json"
            },
            body: this._parameters,
        };
    }
    setResponse(response, fromCache) {
        this.result = this._serializer.deserialize(response);
    }
    get isReadRequest() {
        return false;
    }
}
exports.DeleteDatabaseCommand = DeleteDatabaseCommand;
