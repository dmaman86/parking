import { HttpRequestBase } from "../../Primitives/Http";
import { IServerOperation, OperationResultType } from "../../Documents/Operations/OperationAbstractions";
import { RavenCommand, IRavenResponse } from "../../Http/RavenCommand";
import { DocumentConventions } from "../..";
import { ServerNode } from "../../Http/ServerNode";
export declare class GetServerWideOperationStateOperation implements IServerOperation<IRavenResponse> {
    readonly resultType: OperationResultType;
    private _id;
    constructor(id: number);
    getCommand(conventions: DocumentConventions): RavenCommand<IRavenResponse>;
}
export declare class GetServerWideOperationStateCommand extends RavenCommand<IRavenResponse> {
    private _id;
    private _conventions;
    constructor(conventions: DocumentConventions, id: number);
    createRequest(node: ServerNode): HttpRequestBase;
    readonly isReadRequest: boolean;
    setResponse(response: string, fromCache: boolean): void;
}
