import { DocumentStore } from "../Documents/DocumentStore";
import { IDocumentStore } from "../Documents/IDocumentStore";
import { DatabaseRecord } from "../ServerWide";
import { Todo } from "../Types";
import { IDisposable } from "../Types/Contracts";
import { RavenServerLocator } from "./RavenServerLocator";
export declare abstract class RavenTestDriver implements IDisposable {
    private _locator;
    private _securedLocator;
    private static _globalServer;
    private static _globalServerProcess;
    private static _globalSecuredServer;
    private static _globalSecuredServerProcess;
    private _documentStores;
    private static _index;
    protected _disposed: boolean;
    constructor(locator: RavenServerLocator, securedLocator: RavenServerLocator);
    isDisposed(): boolean;
    static debug: boolean;
    getSecuredDocumentStore(): Promise<DocumentStore>;
    private _customizeDbRecord;
    customizeDbRecord: (dbRecord: DatabaseRecord) => void;
    getDocumentStore(): Promise<DocumentStore>;
    getDocumentStore(database: string): Promise<DocumentStore>;
    getDocumentStore(database: string, secured: boolean): Promise<DocumentStore>;
    getDocumentStore(database: string, secured: boolean, waitForIndexingTimeoutInMs?: number): Promise<DocumentStore>;
    protected _setupDatabase(documentStore: IDocumentStore): Promise<void>;
    private _runServer(secured);
    private static _killGlobalServerProcess(secured);
    private _getGlobalServer(secured);
    private _getGlobalProcess(secured);
    private _setGlobalServerProcess(secured, p);
    waitForIndexing(store: IDocumentStore): Promise<void>;
    waitForIndexing(store: IDocumentStore, database?: string): Promise<void>;
    waitForIndexing(store: IDocumentStore, database?: string, timeout?: number): Promise<void>;
    waitForIndexing(store: IDocumentStore, database?: string, timeout?: number, throwOnIndexErrors?: boolean): Promise<void>;
    waitForUserToContinueTheTest(store: Todo): void;
    protected _openBrowser(url: string): void;
    dispose(): void;
}
