"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Constants_1 = require("../Constants");
const Exceptions_1 = require("../Exceptions");
function getRequiredEtagHeader(response) {
    const headers = response.caseless.get(Constants_1.HEADERS.ETAG);
    if (!headers || !headers.length || !headers[0]) {
        Exceptions_1.throwError("InvalidOperationException", "Response did't had an ETag header");
    }
    return etagHeaderToChangeVector(headers[0]);
}
exports.getRequiredEtagHeader = getRequiredEtagHeader;
function getEtagHeader(responseOrHeaders) {
    let responseHeaders;
    if (responseOrHeaders.headers) {
        responseHeaders = responseOrHeaders.caseless;
    }
    const headers = responseHeaders.get(Constants_1.HEADERS.ETAG);
    return Array.isArray(headers)
        ? headers[0]
        : (headers || null);
}
exports.getEtagHeader = getEtagHeader;
function etagHeaderToChangeVector(responseHeader) {
    if (!responseHeader) {
        Exceptions_1.throwError("InvalidOperationException", "Response did't had an ETag header");
    }
    if (responseHeader.startsWith("\"")) {
        return responseHeader.substring(1);
    }
    return responseHeader;
}
exports.etagHeaderToChangeVector = etagHeaderToChangeVector;
function getBooleanHeader(response, header) {
    const headers = response.caseless;
    let headerVal = headers.get(header);
    if (headerVal && Array.isArray(headerVal)) {
        headerVal = (headerVal[0] || null);
    }
    return headerVal
        ? headerVal.toLowerCase() === "true"
        : null;
}
exports.getBooleanHeader = getBooleanHeader;
function getHeaders() {
    return HeadersBuilder.create();
}
exports.getHeaders = getHeaders;
class HeadersBuilder {
    constructor() {
        this._result = {};
    }
    static create() {
        return new HeadersBuilder();
    }
    withContentTypeJson() {
        this._result["content-type"] = "application/json";
        return this;
    }
    with(name, val) {
        this._result[name] = val;
        return this;
    }
    build() {
        return this._result;
    }
}
exports.HeadersBuilder = HeadersBuilder;
